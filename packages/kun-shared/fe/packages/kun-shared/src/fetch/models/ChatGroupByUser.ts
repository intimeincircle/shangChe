/* tslint:disable */
/* eslint-disable */
/**
 * title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EnumeratumChatGroupType,
    EnumeratumChatGroupTypeFromJSON,
    EnumeratumChatGroupTypeFromJSONTyped,
    EnumeratumChatGroupTypeToJSON,
} from './EnumeratumChatGroupType';

/**
 * 
 * @export
 * @interface ChatGroupByUser
 */
export interface ChatGroupByUser {
    /**
     * 
     * @type {number}
     * @memberof ChatGroupByUser
     */
    channelId: number;
    /**
     * 
     * @type {EnumeratumChatGroupType}
     * @memberof ChatGroupByUser
     */
    groupType: EnumeratumChatGroupType;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    groupId: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    lastRead: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChatGroupByUser
     */
    isStarter: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChatGroupByUser
     */
    isActive: boolean;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    groupName?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    groupAvatar?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    starterId?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    starterName?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    starterAvatar?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    toId?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    toName?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    toAvatar?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    chatBackground?: string;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    nickNameInGroup?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChatGroupByUser
     */
    silence: boolean;
    /**
     * 
     * @type {number}
     * @memberof ChatGroupByUser
     */
    toRead?: number;
    /**
     * 
     * @type {string}
     * @memberof ChatGroupByUser
     */
    updateAt: string;
}

export function ChatGroupByUserFromJSON(json: any): ChatGroupByUser {
    return ChatGroupByUserFromJSONTyped(json, false);
}

export function ChatGroupByUserFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatGroupByUser {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channelId': json['channelId'],
        'groupType': EnumeratumChatGroupTypeFromJSON(json['groupType']),
        'userId': json['userId'],
        'groupId': json['groupId'],
        'lastRead': json['lastRead'],
        'isStarter': json['isStarter'],
        'isActive': json['isActive'],
        'groupName': !exists(json, 'groupName') ? undefined : json['groupName'],
        'groupAvatar': !exists(json, 'groupAvatar') ? undefined : json['groupAvatar'],
        'starterId': !exists(json, 'starterId') ? undefined : json['starterId'],
        'starterName': !exists(json, 'starterName') ? undefined : json['starterName'],
        'starterAvatar': !exists(json, 'starterAvatar') ? undefined : json['starterAvatar'],
        'toId': !exists(json, 'toId') ? undefined : json['toId'],
        'toName': !exists(json, 'toName') ? undefined : json['toName'],
        'toAvatar': !exists(json, 'toAvatar') ? undefined : json['toAvatar'],
        'chatBackground': !exists(json, 'chatBackground') ? undefined : json['chatBackground'],
        'nickNameInGroup': !exists(json, 'nickNameInGroup') ? undefined : json['nickNameInGroup'],
        'silence': json['silence'],
        'toRead': !exists(json, 'toRead') ? undefined : json['toRead'],
        'updateAt': json['updateAt'],
    };
}

export function ChatGroupByUserToJSON(value?: ChatGroupByUser | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channelId': value.channelId,
        'groupType': EnumeratumChatGroupTypeToJSON(value.groupType),
        'userId': value.userId,
        'groupId': value.groupId,
        'lastRead': value.lastRead,
        'isStarter': value.isStarter,
        'isActive': value.isActive,
        'groupName': value.groupName,
        'groupAvatar': value.groupAvatar,
        'starterId': value.starterId,
        'starterName': value.starterName,
        'starterAvatar': value.starterAvatar,
        'toId': value.toId,
        'toName': value.toName,
        'toAvatar': value.toAvatar,
        'chatBackground': value.chatBackground,
        'nickNameInGroup': value.nickNameInGroup,
        'silence': value.silence,
        'toRead': value.toRead,
        'updateAt': value.updateAt,
    };
}

