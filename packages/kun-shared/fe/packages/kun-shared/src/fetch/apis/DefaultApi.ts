/* tslint:disable */
/* eslint-disable */
/**
 * title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    A1Return,
    A1ReturnFromJSON,
    A1ReturnToJSON,
    AddStarbuckGrouponTicket,
    AddStarbuckGrouponTicketFromJSON,
    AddStarbuckGrouponTicketToJSON,
    EnumeratumShandianOrderAllStatus,
    EnumeratumShandianOrderAllStatusFromJSON,
    EnumeratumShandianOrderAllStatusToJSON,
    GetRtcToken,
    GetRtcTokenFromJSON,
    GetRtcTokenToJSON,
    KunExerciseList,
    KunExerciseListFromJSON,
    KunExerciseListToJSON,
    ListPaymentHistory,
    ListPaymentHistoryFromJSON,
    ListPaymentHistoryToJSON,
    NoSqlPagingListDataABGroup,
    NoSqlPagingListDataABGroupFromJSON,
    NoSqlPagingListDataABGroupToJSON,
    NoSqlPagingListDataKunCard,
    NoSqlPagingListDataKunCardFromJSON,
    NoSqlPagingListDataKunCardToJSON,
    NoSqlPagingListDataKunMessageReturn,
    NoSqlPagingListDataKunMessageReturnFromJSON,
    NoSqlPagingListDataKunMessageReturnToJSON,
    NoSqlPagingListDataLqUser,
    NoSqlPagingListDataLqUserFromJSON,
    NoSqlPagingListDataLqUserToJSON,
    NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturn,
    NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturnFromJSON,
    NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturnToJSON,
    NoSqlPagingListDataPageMarkShandianOrder,
    NoSqlPagingListDataPageMarkShandianOrderFromJSON,
    NoSqlPagingListDataPageMarkShandianOrderToJSON,
    NoSqlPagingListDataShandianBrandItem,
    NoSqlPagingListDataShandianBrandItemFromJSON,
    NoSqlPagingListDataShandianBrandItemToJSON,
    NoSqlPagingListDataShandianItem,
    NoSqlPagingListDataShandianItemFromJSON,
    NoSqlPagingListDataShandianItemToJSON,
    NoSqlPagingListHorseSeriesReturn,
    NoSqlPagingListHorseSeriesReturnFromJSON,
    NoSqlPagingListHorseSeriesReturnToJSON,
    OptionDataIpInfoItem,
    OptionDataIpInfoItemFromJSON,
    OptionDataIpInfoItemToJSON,
    OptionDataKunAudioReadLog,
    OptionDataKunAudioReadLogFromJSON,
    OptionDataKunAudioReadLogToJSON,
    OptionDataKunExercise,
    OptionDataKunExerciseFromJSON,
    OptionDataKunExerciseToJSON,
    OptionDataListListCommonSearchContent,
    OptionDataListListCommonSearchContentFromJSON,
    OptionDataListListCommonSearchContentToJSON,
    OptionDataReqCreateShandianOrder,
    OptionDataReqCreateShandianOrderFromJSON,
    OptionDataReqCreateShandianOrderToJSON,
    OptionDataShandianOrder,
    OptionDataShandianOrderFromJSON,
    OptionDataShandianOrderToJSON,
    OptionDataStarbuckPaidOrder,
    OptionDataStarbuckPaidOrderFromJSON,
    OptionDataStarbuckPaidOrderToJSON,
    OptionDataString,
    OptionDataStringFromJSON,
    OptionDataStringToJSON,
    OptionDataUUID,
    OptionDataUUIDFromJSON,
    OptionDataUUIDToJSON,
    ReqAddDeliverMessage,
    ReqAddDeliverMessageFromJSON,
    ReqAddDeliverMessageToJSON,
    ReqCreateCardComment1,
    ReqCreateCardComment1FromJSON,
    ReqCreateCardComment1ToJSON,
    ReqCreateConcern,
    ReqCreateConcernFromJSON,
    ReqCreateConcernToJSON,
    ReqCreateKunPinCard,
    ReqCreateKunPinCardFromJSON,
    ReqCreateKunPinCardToJSON,
    ReqCreatePracticeComment,
    ReqCreatePracticeCommentFromJSON,
    ReqCreatePracticeCommentToJSON,
    ReqCreateShandianOrder,
    ReqCreateShandianOrderFromJSON,
    ReqCreateShandianOrderToJSON,
    ReqDeleteKunPinCard,
    ReqDeleteKunPinCardFromJSON,
    ReqDeleteKunPinCardToJSON,
    ReqGetAudioLog,
    ReqGetAudioLogFromJSON,
    ReqGetAudioLogToJSON,
    ReqGetExerciseItem,
    ReqGetExerciseItemFromJSON,
    ReqGetExerciseItemToJSON,
    ReqGetHistoryMessage,
    ReqGetHistoryMessageFromJSON,
    ReqGetHistoryMessageToJSON,
    ReqMarkHorseRead,
    ReqMarkHorseReadFromJSON,
    ReqMarkHorseReadToJSON,
    ReqMarkUserDanger,
    ReqMarkUserDangerFromJSON,
    ReqMarkUserDangerToJSON,
    ReqQuerySeriesHorse,
    ReqQuerySeriesHorseFromJSON,
    ReqQuerySeriesHorseToJSON,
    ReqStartChat,
    ReqStartChatFromJSON,
    ReqStartChatToJSON,
    ReqUpdateAudioLog,
    ReqUpdateAudioLogFromJSON,
    ReqUpdateAudioLogToJSON,
    ReqUpdatePracticeAppraise,
    ReqUpdatePracticeAppraiseFromJSON,
    ReqUpdatePracticeAppraiseToJSON,
    ReqUpdateSeriesPrice,
    ReqUpdateSeriesPriceFromJSON,
    ReqUpdateSeriesPriceToJSON,
    RetMsg,
    RetMsgFromJSON,
    RetMsgToJSON,
    StarbuckStoreDetailADT,
    StarbuckStoreDetailADTFromJSON,
    StarbuckStoreDetailADTToJSON,
    StarbuckStoreItem,
    StarbuckStoreItemFromJSON,
    StarbuckStoreItemToJSON,
} from '../models';

export interface GetApiV1Chat50ChatGroupsRequest {
    authorization: string;
}

export interface GetApiV1Chat50ChatGroupsUserRequest {
    authorization: string;
}

export interface GetApiV1ConcernPractice52ListRequest {
    authorization: string;
}

export interface GetApiV1OrderStarbuckIncomingRequest {
    timestamp: string;
    aopic: string;
    sign: string;
    fromPlatform?: string;
}

export interface GetApiV1OrderStarbuckSearchRequest {
    authorization: string;
    lat: string;
    lon: string;
}

export interface GetApiV1PinCard50ListRequest {
    seriesId: string;
}

export interface GetApiV1PinCard60ListRequest {
    seriesId: string;
}

export interface GetApiV1Search50HorseRequest {
    query: string;
}

export interface GetApiV1ShandianBranchListRequest {
    authorization: string;
    query: string;
}

export interface GetApiV1ShandianItemOrderListByStatusRequest {
    authorization: string;
    status?: EnumeratumShandianOrderAllStatus;
}

export interface GetApiV1ShandianItemOrderTextCreateRequest {
    authorization: string;
    ip: string;
    input: string;
}

export interface GetApiV1ShandianItemOrderUserRequest {
    authorization: string;
    status?: EnumeratumShandianOrderAllStatus;
}

export interface GetApiV1ShandianItemStarbuckListRequest {
    authorization: string;
    query: string;
}

export interface GetApiV1ShandianShandianOrderGetRequest {
    id: number;
}

export interface GetApiV1ShandianTaobaoOrderGetRequest {
    uuid: string;
}

export interface GetApiV1TapirHorseMembersRequest {
    authorization: string;
}

export interface GetApiV1ToolsIpGetRequest {
    ip: string;
}

export interface PostApiTapirV1Chat50ChatMessagesHistoryRequest {
    authorization: string;
    reqGetHistoryMessage: ReqGetHistoryMessage;
}

export interface PostApiTapirV1Chat60ChatMessagesHistoryRequest {
    authorization: string;
    reqGetHistoryMessage: ReqGetHistoryMessage;
}

export interface PostApiTapirV1RtcChatRtcTokenGetRequest {
    authorization: string;
    getRtcToken: GetRtcToken;
}

export interface PostApiV1CardRead50MarkreadRequest {
    authorization: string;
    reqMarkHorseRead: ReqMarkHorseRead;
}

export interface PostApiV1Chat50ChatGroupRequest {
    authorization: string;
    reqStartChat: ReqStartChat;
}

export interface PostApiV1Chat60ChatGroupRequest {
    authorization: string;
    reqStartChat: ReqStartChat;
}

export interface PostApiV1Concern50CreateRequest {
    authorization: string;
    reqCreateConcern: ReqCreateConcern;
}

export interface PostApiV1Concern52CreateRequest {
    authorization: string;
    reqCreateConcern: ReqCreateConcern;
}

export interface PostApiV1Concern62CreateRequest {
    authorization: string;
    reqCreateConcern: ReqCreateConcern;
}

export interface PostApiV1HorseSeriesPriceRequest {
    reqUpdateSeriesPrice: ReqUpdateSeriesPrice;
}

export interface PostApiV1Order50PaymentListRequest {
    authorization: string;
    query: string;
    reqUpdatePracticeAppraise: ReqUpdatePracticeAppraise;
}

export interface PostApiV1OrderStarbuckGetRequest {
    authorization: string;
    id: number;
}

export interface PostApiV1PinCard50CreateRequest {
    reqCreateKunPinCard: ReqCreateKunPinCard;
    hi?: string;
}

export interface PostApiV1PinCard50DeleteRequest {
    reqDeleteKunPinCard: ReqDeleteKunPinCard;
}

export interface PostApiV1PinCard60CreateRequest {
    reqCreateKunPinCard: ReqCreateKunPinCard;
    hi?: string;
}

export interface PostApiV1PinCard60DeleteRequest {
    reqDeleteKunPinCard: ReqDeleteKunPinCard;
}

export interface PostApiV1ShandianItemOrderCreateRequest {
    authorization: string;
    reqCreateShandianOrder: ReqCreateShandianOrder;
}

export interface PostApiV1ShandianItemOrderDeliveryRequest {
    authorization: string;
    reqAddDeliverMessage: ReqAddDeliverMessage;
}

export interface PostApiV1ShandianTaobaoOrderCreateRequest {
    addStarbuckGrouponTicket: AddStarbuckGrouponTicket;
}

export interface PostApiV1TapirAdmin50SecurityCreateRequest {
    authorization: string;
    reqMarkUserDanger: ReqMarkUserDanger;
}

export interface PostApiV1TapirCardDio50OffsetCreateRequest {
    authorization: string;
    reqUpdateAudioLog: ReqUpdateAudioLog;
}

export interface PostApiV1TapirCardDio50OffsetGetRequest {
    authorization: string;
    reqGetAudioLog: ReqGetAudioLog;
}

export interface PostApiV1TapirCardDio60OffsetCreateRequest {
    authorization: string;
    reqUpdateAudioLog: ReqUpdateAudioLog;
}

export interface PostApiV1TapirCardDio60OffsetGetRequest {
    authorization: string;
    reqGetAudioLog: ReqGetAudioLog;
}

export interface PostApiV1TapirHorseCommentCreateRequest {
    authorization: string;
    reqCreateCardComment1: ReqCreateCardComment1;
}

export interface PostApiV1TapirHorseExerciseItemRequest {
    authorization: string;
    reqGetExerciseItem: ReqGetExerciseItem;
}

export interface PostApiV1TapirHorsePraticeCommentCreateRequest {
    authorization: string;
    reqCreatePracticeComment: ReqCreatePracticeComment;
}

export interface PostApiV1TapirHorseSeriesQueryRequest {
    authorization: string;
    reqQuerySeriesHorse: ReqQuerySeriesHorse;
}

export interface PostApiV1TapirPracticeAppriseCreateRequest {
    authorization: string;
    reqUpdatePracticeAppraise: ReqUpdatePracticeAppraise;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async getApiV1Chat50ChatGroupsRaw(requestParameters: GetApiV1Chat50ChatGroupsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataABGroup>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1Chat50ChatGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/chat/50/chat/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataABGroupFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1Chat50ChatGroups(requestParameters: GetApiV1Chat50ChatGroupsRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataABGroup> {
        const response = await this.getApiV1Chat50ChatGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1Chat50ChatGroupsUserRaw(requestParameters: GetApiV1Chat50ChatGroupsUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataLqUser>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1Chat50ChatGroupsUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/chat/50/chat/groups-user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataLqUserFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1Chat50ChatGroupsUser(requestParameters: GetApiV1Chat50ChatGroupsUserRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataLqUser> {
        const response = await this.getApiV1Chat50ChatGroupsUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ConcernPractice52ListRaw(requestParameters: GetApiV1ConcernPractice52ListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<KunExerciseList>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ConcernPractice52List.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/concern/practice/52/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KunExerciseListFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ConcernPractice52List(requestParameters: GetApiV1ConcernPractice52ListRequest, initOverrides?: RequestInit): Promise<KunExerciseList> {
        const response = await this.getApiV1ConcernPractice52ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1OrderStarbuckIncomingRaw(requestParameters: GetApiV1OrderStarbuckIncomingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<A1Return>> {
        if (requestParameters.timestamp === null || requestParameters.timestamp === undefined) {
            throw new runtime.RequiredError('timestamp','Required parameter requestParameters.timestamp was null or undefined when calling getApiV1OrderStarbuckIncoming.');
        }

        if (requestParameters.aopic === null || requestParameters.aopic === undefined) {
            throw new runtime.RequiredError('aopic','Required parameter requestParameters.aopic was null or undefined when calling getApiV1OrderStarbuckIncoming.');
        }

        if (requestParameters.sign === null || requestParameters.sign === undefined) {
            throw new runtime.RequiredError('sign','Required parameter requestParameters.sign was null or undefined when calling getApiV1OrderStarbuckIncoming.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromPlatform !== undefined) {
            queryParameters['fromPlatform'] = requestParameters.fromPlatform;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.aopic !== undefined) {
            queryParameters['aopic'] = requestParameters.aopic;
        }

        if (requestParameters.sign !== undefined) {
            queryParameters['sign'] = requestParameters.sign;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/order/starbuck/incoming`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => A1ReturnFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1OrderStarbuckIncoming(requestParameters: GetApiV1OrderStarbuckIncomingRequest, initOverrides?: RequestInit): Promise<A1Return> {
        const response = await this.getApiV1OrderStarbuckIncomingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1OrderStarbuckSearchRaw(requestParameters: GetApiV1OrderStarbuckSearchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StarbuckStoreItem>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1OrderStarbuckSearch.');
        }

        if (requestParameters.lat === null || requestParameters.lat === undefined) {
            throw new runtime.RequiredError('lat','Required parameter requestParameters.lat was null or undefined when calling getApiV1OrderStarbuckSearch.');
        }

        if (requestParameters.lon === null || requestParameters.lon === undefined) {
            throw new runtime.RequiredError('lon','Required parameter requestParameters.lon was null or undefined when calling getApiV1OrderStarbuckSearch.');
        }

        const queryParameters: any = {};

        if (requestParameters.lat !== undefined) {
            queryParameters['lat'] = requestParameters.lat;
        }

        if (requestParameters.lon !== undefined) {
            queryParameters['lon'] = requestParameters.lon;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/order/starbuck/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StarbuckStoreItemFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1OrderStarbuckSearch(requestParameters: GetApiV1OrderStarbuckSearchRequest, initOverrides?: RequestInit): Promise<StarbuckStoreItem> {
        const response = await this.getApiV1OrderStarbuckSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1PinCard50ListRaw(requestParameters: GetApiV1PinCard50ListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataKunCard>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getApiV1PinCard50List.');
        }

        const queryParameters: any = {};

        if (requestParameters.seriesId !== undefined) {
            queryParameters['seriesId'] = requestParameters.seriesId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pin-card/50/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunCardFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1PinCard50List(requestParameters: GetApiV1PinCard50ListRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataKunCard> {
        const response = await this.getApiV1PinCard50ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1PinCard60ListRaw(requestParameters: GetApiV1PinCard60ListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataKunCard>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getApiV1PinCard60List.');
        }

        const queryParameters: any = {};

        if (requestParameters.seriesId !== undefined) {
            queryParameters['seriesId'] = requestParameters.seriesId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pin-card/60/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunCardFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1PinCard60List(requestParameters: GetApiV1PinCard60ListRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataKunCard> {
        const response = await this.getApiV1PinCard60ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1Search50HorseRaw(requestParameters: GetApiV1Search50HorseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataListListCommonSearchContent>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling getApiV1Search50Horse.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/search/50/horse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataListListCommonSearchContentFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1Search50Horse(requestParameters: GetApiV1Search50HorseRequest, initOverrides?: RequestInit): Promise<OptionDataListListCommonSearchContent> {
        const response = await this.getApiV1Search50HorseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianBranchListRaw(requestParameters: GetApiV1ShandianBranchListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataShandianBrandItem>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianBranchList.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling getApiV1ShandianBranchList.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/branch/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataShandianBrandItemFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianBranchList(requestParameters: GetApiV1ShandianBranchListRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataShandianBrandItem> {
        const response = await this.getApiV1ShandianBranchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianItemOrderListByStatusRaw(requestParameters: GetApiV1ShandianItemOrderListByStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataPageMarkShandianOrder>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianItemOrderListByStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/order/list_by_status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataPageMarkShandianOrderFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianItemOrderListByStatus(requestParameters: GetApiV1ShandianItemOrderListByStatusRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataPageMarkShandianOrder> {
        const response = await this.getApiV1ShandianItemOrderListByStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianItemOrderTextCreateRaw(requestParameters: GetApiV1ShandianItemOrderTextCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataReqCreateShandianOrder>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianItemOrderTextCreate.');
        }

        if (requestParameters.ip === null || requestParameters.ip === undefined) {
            throw new runtime.RequiredError('ip','Required parameter requestParameters.ip was null or undefined when calling getApiV1ShandianItemOrderTextCreate.');
        }

        if (requestParameters.input === null || requestParameters.input === undefined) {
            throw new runtime.RequiredError('input','Required parameter requestParameters.input was null or undefined when calling getApiV1ShandianItemOrderTextCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.ip !== undefined) {
            queryParameters['ip'] = requestParameters.ip;
        }

        if (requestParameters.input !== undefined) {
            queryParameters['input'] = requestParameters.input;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/order/text/create`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataReqCreateShandianOrderFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianItemOrderTextCreate(requestParameters: GetApiV1ShandianItemOrderTextCreateRequest, initOverrides?: RequestInit): Promise<OptionDataReqCreateShandianOrder> {
        const response = await this.getApiV1ShandianItemOrderTextCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianItemOrderUserRaw(requestParameters: GetApiV1ShandianItemOrderUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataPageMarkShandianOrder>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianItemOrderUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/order/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataPageMarkShandianOrderFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianItemOrderUser(requestParameters: GetApiV1ShandianItemOrderUserRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataPageMarkShandianOrder> {
        const response = await this.getApiV1ShandianItemOrderUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianItemStarbuckListRaw(requestParameters: GetApiV1ShandianItemStarbuckListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataShandianItem>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianItemStarbuckList.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling getApiV1ShandianItemStarbuckList.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/starbuck/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataShandianItemFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianItemStarbuckList(requestParameters: GetApiV1ShandianItemStarbuckListRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataShandianItem> {
        const response = await this.getApiV1ShandianItemStarbuckListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianShandianOrderGetRaw(requestParameters: GetApiV1ShandianShandianOrderGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataShandianOrder>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApiV1ShandianShandianOrderGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/shandian/shandian/order/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataShandianOrderFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianShandianOrderGet(requestParameters: GetApiV1ShandianShandianOrderGetRequest, initOverrides?: RequestInit): Promise<OptionDataShandianOrder> {
        const response = await this.getApiV1ShandianShandianOrderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianTaobaoOrderGetRaw(requestParameters: GetApiV1ShandianTaobaoOrderGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataStarbuckPaidOrder>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getApiV1ShandianTaobaoOrderGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.uuid !== undefined) {
            queryParameters['uuid'] = requestParameters.uuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/shandian/taobao/order/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataStarbuckPaidOrderFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianTaobaoOrderGet(requestParameters: GetApiV1ShandianTaobaoOrderGetRequest, initOverrides?: RequestInit): Promise<OptionDataStarbuckPaidOrder> {
        const response = await this.getApiV1ShandianTaobaoOrderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1TapirHorseMembersRaw(requestParameters: GetApiV1TapirHorseMembersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataLqUser>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1TapirHorseMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/horse/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataLqUserFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1TapirHorseMembers(requestParameters: GetApiV1TapirHorseMembersRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataLqUser> {
        const response = await this.getApiV1TapirHorseMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ToolsIpGetRaw(requestParameters: GetApiV1ToolsIpGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataIpInfoItem>> {
        if (requestParameters.ip === null || requestParameters.ip === undefined) {
            throw new runtime.RequiredError('ip','Required parameter requestParameters.ip was null or undefined when calling getApiV1ToolsIpGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.ip !== undefined) {
            queryParameters['ip'] = requestParameters.ip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tools/ip/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataIpInfoItemFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ToolsIpGet(requestParameters: GetApiV1ToolsIpGetRequest, initOverrides?: RequestInit): Promise<OptionDataIpInfoItem> {
        const response = await this.getApiV1ToolsIpGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiTapirV1Chat50ChatMessagesHistoryRaw(requestParameters: PostApiTapirV1Chat50ChatMessagesHistoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataKunMessageReturn>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiTapirV1Chat50ChatMessagesHistory.');
        }

        if (requestParameters.reqGetHistoryMessage === null || requestParameters.reqGetHistoryMessage === undefined) {
            throw new runtime.RequiredError('reqGetHistoryMessage','Required parameter requestParameters.reqGetHistoryMessage was null or undefined when calling postApiTapirV1Chat50ChatMessagesHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/tapir/v1/chat/50/chat/messages/history`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqGetHistoryMessageToJSON(requestParameters.reqGetHistoryMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunMessageReturnFromJSON(jsonValue));
    }

    /**
     */
    async postApiTapirV1Chat50ChatMessagesHistory(requestParameters: PostApiTapirV1Chat50ChatMessagesHistoryRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataKunMessageReturn> {
        const response = await this.postApiTapirV1Chat50ChatMessagesHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiTapirV1Chat60ChatMessagesHistoryRaw(requestParameters: PostApiTapirV1Chat60ChatMessagesHistoryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataKunMessageReturn>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiTapirV1Chat60ChatMessagesHistory.');
        }

        if (requestParameters.reqGetHistoryMessage === null || requestParameters.reqGetHistoryMessage === undefined) {
            throw new runtime.RequiredError('reqGetHistoryMessage','Required parameter requestParameters.reqGetHistoryMessage was null or undefined when calling postApiTapirV1Chat60ChatMessagesHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/tapir/v1/chat/60/chat/messages/history`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqGetHistoryMessageToJSON(requestParameters.reqGetHistoryMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunMessageReturnFromJSON(jsonValue));
    }

    /**
     */
    async postApiTapirV1Chat60ChatMessagesHistory(requestParameters: PostApiTapirV1Chat60ChatMessagesHistoryRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataKunMessageReturn> {
        const response = await this.postApiTapirV1Chat60ChatMessagesHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiTapirV1RtcChatRtcTokenGetRaw(requestParameters: PostApiTapirV1RtcChatRtcTokenGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataString>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiTapirV1RtcChatRtcTokenGet.');
        }

        if (requestParameters.getRtcToken === null || requestParameters.getRtcToken === undefined) {
            throw new runtime.RequiredError('getRtcToken','Required parameter requestParameters.getRtcToken was null or undefined when calling postApiTapirV1RtcChatRtcTokenGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/tapir/v1/rtc/chat/rtc/token/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetRtcTokenToJSON(requestParameters.getRtcToken),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataStringFromJSON(jsonValue));
    }

    /**
     */
    async postApiTapirV1RtcChatRtcTokenGet(requestParameters: PostApiTapirV1RtcChatRtcTokenGetRequest, initOverrides?: RequestInit): Promise<OptionDataString> {
        const response = await this.postApiTapirV1RtcChatRtcTokenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1CardRead50MarkreadRaw(requestParameters: PostApiV1CardRead50MarkreadRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1CardRead50Markread.');
        }

        if (requestParameters.reqMarkHorseRead === null || requestParameters.reqMarkHorseRead === undefined) {
            throw new runtime.RequiredError('reqMarkHorseRead','Required parameter requestParameters.reqMarkHorseRead was null or undefined when calling postApiV1CardRead50Markread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/card/read/50/markRead`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqMarkHorseReadToJSON(requestParameters.reqMarkHorseRead),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1CardRead50Markread(requestParameters: PostApiV1CardRead50MarkreadRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1CardRead50MarkreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Chat50ChatGroupRaw(requestParameters: PostApiV1Chat50ChatGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataUUID>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Chat50ChatGroup.');
        }

        if (requestParameters.reqStartChat === null || requestParameters.reqStartChat === undefined) {
            throw new runtime.RequiredError('reqStartChat','Required parameter requestParameters.reqStartChat was null or undefined when calling postApiV1Chat50ChatGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/chat/50/chat/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqStartChatToJSON(requestParameters.reqStartChat),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataUUIDFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Chat50ChatGroup(requestParameters: PostApiV1Chat50ChatGroupRequest, initOverrides?: RequestInit): Promise<OptionDataUUID> {
        const response = await this.postApiV1Chat50ChatGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Chat60ChatGroupRaw(requestParameters: PostApiV1Chat60ChatGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataUUID>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Chat60ChatGroup.');
        }

        if (requestParameters.reqStartChat === null || requestParameters.reqStartChat === undefined) {
            throw new runtime.RequiredError('reqStartChat','Required parameter requestParameters.reqStartChat was null or undefined when calling postApiV1Chat60ChatGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/chat/60/chat/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqStartChatToJSON(requestParameters.reqStartChat),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataUUIDFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Chat60ChatGroup(requestParameters: PostApiV1Chat60ChatGroupRequest, initOverrides?: RequestInit): Promise<OptionDataUUID> {
        const response = await this.postApiV1Chat60ChatGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Concern50CreateRaw(requestParameters: PostApiV1Concern50CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Concern50Create.');
        }

        if (requestParameters.reqCreateConcern === null || requestParameters.reqCreateConcern === undefined) {
            throw new runtime.RequiredError('reqCreateConcern','Required parameter requestParameters.reqCreateConcern was null or undefined when calling postApiV1Concern50Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/concern/50/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateConcernToJSON(requestParameters.reqCreateConcern),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Concern50Create(requestParameters: PostApiV1Concern50CreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1Concern50CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Concern52CreateRaw(requestParameters: PostApiV1Concern52CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Concern52Create.');
        }

        if (requestParameters.reqCreateConcern === null || requestParameters.reqCreateConcern === undefined) {
            throw new runtime.RequiredError('reqCreateConcern','Required parameter requestParameters.reqCreateConcern was null or undefined when calling postApiV1Concern52Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/concern/52/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateConcernToJSON(requestParameters.reqCreateConcern),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Concern52Create(requestParameters: PostApiV1Concern52CreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1Concern52CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Concern62CreateRaw(requestParameters: PostApiV1Concern62CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Concern62Create.');
        }

        if (requestParameters.reqCreateConcern === null || requestParameters.reqCreateConcern === undefined) {
            throw new runtime.RequiredError('reqCreateConcern','Required parameter requestParameters.reqCreateConcern was null or undefined when calling postApiV1Concern62Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/concern/62/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateConcernToJSON(requestParameters.reqCreateConcern),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Concern62Create(requestParameters: PostApiV1Concern62CreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1Concern62CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1HorseSeriesPriceRaw(requestParameters: PostApiV1HorseSeriesPriceRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqUpdateSeriesPrice === null || requestParameters.reqUpdateSeriesPrice === undefined) {
            throw new runtime.RequiredError('reqUpdateSeriesPrice','Required parameter requestParameters.reqUpdateSeriesPrice was null or undefined when calling postApiV1HorseSeriesPrice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/horse/series/price`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdateSeriesPriceToJSON(requestParameters.reqUpdateSeriesPrice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1HorseSeriesPrice(requestParameters: PostApiV1HorseSeriesPriceRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1HorseSeriesPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Order50PaymentListRaw(requestParameters: PostApiV1Order50PaymentListRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListPaymentHistory>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Order50PaymentList.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling postApiV1Order50PaymentList.');
        }

        if (requestParameters.reqUpdatePracticeAppraise === null || requestParameters.reqUpdatePracticeAppraise === undefined) {
            throw new runtime.RequiredError('reqUpdatePracticeAppraise','Required parameter requestParameters.reqUpdatePracticeAppraise was null or undefined when calling postApiV1Order50PaymentList.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/order/50/payment/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdatePracticeAppraiseToJSON(requestParameters.reqUpdatePracticeAppraise),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPaymentHistoryFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Order50PaymentList(requestParameters: PostApiV1Order50PaymentListRequest, initOverrides?: RequestInit): Promise<ListPaymentHistory> {
        const response = await this.postApiV1Order50PaymentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1OrderStarbuckGetRaw(requestParameters: PostApiV1OrderStarbuckGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StarbuckStoreDetailADT>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1OrderStarbuckGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postApiV1OrderStarbuckGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/order/starbuck/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StarbuckStoreDetailADTFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1OrderStarbuckGet(requestParameters: PostApiV1OrderStarbuckGetRequest, initOverrides?: RequestInit): Promise<StarbuckStoreDetailADT> {
        const response = await this.postApiV1OrderStarbuckGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1PinCard50CreateRaw(requestParameters: PostApiV1PinCard50CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqCreateKunPinCard === null || requestParameters.reqCreateKunPinCard === undefined) {
            throw new runtime.RequiredError('reqCreateKunPinCard','Required parameter requestParameters.reqCreateKunPinCard was null or undefined when calling postApiV1PinCard50Create.');
        }

        const queryParameters: any = {};

        if (requestParameters.hi !== undefined) {
            queryParameters['hi'] = requestParameters.hi;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/pin-card/50/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateKunPinCardToJSON(requestParameters.reqCreateKunPinCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1PinCard50Create(requestParameters: PostApiV1PinCard50CreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1PinCard50CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1PinCard50DeleteRaw(requestParameters: PostApiV1PinCard50DeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqDeleteKunPinCard === null || requestParameters.reqDeleteKunPinCard === undefined) {
            throw new runtime.RequiredError('reqDeleteKunPinCard','Required parameter requestParameters.reqDeleteKunPinCard was null or undefined when calling postApiV1PinCard50Delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/pin-card/50/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqDeleteKunPinCardToJSON(requestParameters.reqDeleteKunPinCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1PinCard50Delete(requestParameters: PostApiV1PinCard50DeleteRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1PinCard50DeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1PinCard60CreateRaw(requestParameters: PostApiV1PinCard60CreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqCreateKunPinCard === null || requestParameters.reqCreateKunPinCard === undefined) {
            throw new runtime.RequiredError('reqCreateKunPinCard','Required parameter requestParameters.reqCreateKunPinCard was null or undefined when calling postApiV1PinCard60Create.');
        }

        const queryParameters: any = {};

        if (requestParameters.hi !== undefined) {
            queryParameters['hi'] = requestParameters.hi;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/pin-card/60/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateKunPinCardToJSON(requestParameters.reqCreateKunPinCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1PinCard60Create(requestParameters: PostApiV1PinCard60CreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1PinCard60CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1PinCard60DeleteRaw(requestParameters: PostApiV1PinCard60DeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqDeleteKunPinCard === null || requestParameters.reqDeleteKunPinCard === undefined) {
            throw new runtime.RequiredError('reqDeleteKunPinCard','Required parameter requestParameters.reqDeleteKunPinCard was null or undefined when calling postApiV1PinCard60Delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/pin-card/60/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqDeleteKunPinCardToJSON(requestParameters.reqDeleteKunPinCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1PinCard60Delete(requestParameters: PostApiV1PinCard60DeleteRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1PinCard60DeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianItemOrderCreateRaw(requestParameters: PostApiV1ShandianItemOrderCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1ShandianItemOrderCreate.');
        }

        if (requestParameters.reqCreateShandianOrder === null || requestParameters.reqCreateShandianOrder === undefined) {
            throw new runtime.RequiredError('reqCreateShandianOrder','Required parameter requestParameters.reqCreateShandianOrder was null or undefined when calling postApiV1ShandianItemOrderCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/order/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateShandianOrderToJSON(requestParameters.reqCreateShandianOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianItemOrderCreate(requestParameters: PostApiV1ShandianItemOrderCreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1ShandianItemOrderCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianItemOrderDeliveryRaw(requestParameters: PostApiV1ShandianItemOrderDeliveryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1ShandianItemOrderDelivery.');
        }

        if (requestParameters.reqAddDeliverMessage === null || requestParameters.reqAddDeliverMessage === undefined) {
            throw new runtime.RequiredError('reqAddDeliverMessage','Required parameter requestParameters.reqAddDeliverMessage was null or undefined when calling postApiV1ShandianItemOrderDelivery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/order/delivery`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqAddDeliverMessageToJSON(requestParameters.reqAddDeliverMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianItemOrderDelivery(requestParameters: PostApiV1ShandianItemOrderDeliveryRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1ShandianItemOrderDeliveryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianTaobaoOrderCreateRaw(requestParameters: PostApiV1ShandianTaobaoOrderCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.addStarbuckGrouponTicket === null || requestParameters.addStarbuckGrouponTicket === undefined) {
            throw new runtime.RequiredError('addStarbuckGrouponTicket','Required parameter requestParameters.addStarbuckGrouponTicket was null or undefined when calling postApiV1ShandianTaobaoOrderCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/shandian/taobao/order/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddStarbuckGrouponTicketToJSON(requestParameters.addStarbuckGrouponTicket),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianTaobaoOrderCreate(requestParameters: PostApiV1ShandianTaobaoOrderCreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1ShandianTaobaoOrderCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirAdmin50SecurityCreateRaw(requestParameters: PostApiV1TapirAdmin50SecurityCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirAdmin50SecurityCreate.');
        }

        if (requestParameters.reqMarkUserDanger === null || requestParameters.reqMarkUserDanger === undefined) {
            throw new runtime.RequiredError('reqMarkUserDanger','Required parameter requestParameters.reqMarkUserDanger was null or undefined when calling postApiV1TapirAdmin50SecurityCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/admin/50/security/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqMarkUserDangerToJSON(requestParameters.reqMarkUserDanger),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirAdmin50SecurityCreate(requestParameters: PostApiV1TapirAdmin50SecurityCreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1TapirAdmin50SecurityCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirCardDio50OffsetCreateRaw(requestParameters: PostApiV1TapirCardDio50OffsetCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirCardDio50OffsetCreate.');
        }

        if (requestParameters.reqUpdateAudioLog === null || requestParameters.reqUpdateAudioLog === undefined) {
            throw new runtime.RequiredError('reqUpdateAudioLog','Required parameter requestParameters.reqUpdateAudioLog was null or undefined when calling postApiV1TapirCardDio50OffsetCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/card/dio/50/offset/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdateAudioLogToJSON(requestParameters.reqUpdateAudioLog),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirCardDio50OffsetCreate(requestParameters: PostApiV1TapirCardDio50OffsetCreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1TapirCardDio50OffsetCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirCardDio50OffsetGetRaw(requestParameters: PostApiV1TapirCardDio50OffsetGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataKunAudioReadLog>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirCardDio50OffsetGet.');
        }

        if (requestParameters.reqGetAudioLog === null || requestParameters.reqGetAudioLog === undefined) {
            throw new runtime.RequiredError('reqGetAudioLog','Required parameter requestParameters.reqGetAudioLog was null or undefined when calling postApiV1TapirCardDio50OffsetGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/card/dio/50/offset/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqGetAudioLogToJSON(requestParameters.reqGetAudioLog),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunAudioReadLogFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirCardDio50OffsetGet(requestParameters: PostApiV1TapirCardDio50OffsetGetRequest, initOverrides?: RequestInit): Promise<OptionDataKunAudioReadLog> {
        const response = await this.postApiV1TapirCardDio50OffsetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirCardDio60OffsetCreateRaw(requestParameters: PostApiV1TapirCardDio60OffsetCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirCardDio60OffsetCreate.');
        }

        if (requestParameters.reqUpdateAudioLog === null || requestParameters.reqUpdateAudioLog === undefined) {
            throw new runtime.RequiredError('reqUpdateAudioLog','Required parameter requestParameters.reqUpdateAudioLog was null or undefined when calling postApiV1TapirCardDio60OffsetCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/card/dio/60/offset/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdateAudioLogToJSON(requestParameters.reqUpdateAudioLog),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirCardDio60OffsetCreate(requestParameters: PostApiV1TapirCardDio60OffsetCreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1TapirCardDio60OffsetCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirCardDio60OffsetGetRaw(requestParameters: PostApiV1TapirCardDio60OffsetGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataKunAudioReadLog>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirCardDio60OffsetGet.');
        }

        if (requestParameters.reqGetAudioLog === null || requestParameters.reqGetAudioLog === undefined) {
            throw new runtime.RequiredError('reqGetAudioLog','Required parameter requestParameters.reqGetAudioLog was null or undefined when calling postApiV1TapirCardDio60OffsetGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/card/dio/60/offset/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqGetAudioLogToJSON(requestParameters.reqGetAudioLog),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunAudioReadLogFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirCardDio60OffsetGet(requestParameters: PostApiV1TapirCardDio60OffsetGetRequest, initOverrides?: RequestInit): Promise<OptionDataKunAudioReadLog> {
        const response = await this.postApiV1TapirCardDio60OffsetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirHorseCommentCreateRaw(requestParameters: PostApiV1TapirHorseCommentCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirHorseCommentCreate.');
        }

        if (requestParameters.reqCreateCardComment1 === null || requestParameters.reqCreateCardComment1 === undefined) {
            throw new runtime.RequiredError('reqCreateCardComment1','Required parameter requestParameters.reqCreateCardComment1 was null or undefined when calling postApiV1TapirHorseCommentCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/horse/comment/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateCardComment1ToJSON(requestParameters.reqCreateCardComment1),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirHorseCommentCreate(requestParameters: PostApiV1TapirHorseCommentCreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1TapirHorseCommentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirHorseExerciseItemRaw(requestParameters: PostApiV1TapirHorseExerciseItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OptionDataKunExercise>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirHorseExerciseItem.');
        }

        if (requestParameters.reqGetExerciseItem === null || requestParameters.reqGetExerciseItem === undefined) {
            throw new runtime.RequiredError('reqGetExerciseItem','Required parameter requestParameters.reqGetExerciseItem was null or undefined when calling postApiV1TapirHorseExerciseItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/horse/exercise/item`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqGetExerciseItemToJSON(requestParameters.reqGetExerciseItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunExerciseFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirHorseExerciseItem(requestParameters: PostApiV1TapirHorseExerciseItemRequest, initOverrides?: RequestInit): Promise<OptionDataKunExercise> {
        const response = await this.postApiV1TapirHorseExerciseItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirHorsePraticeCommentCreateRaw(requestParameters: PostApiV1TapirHorsePraticeCommentCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirHorsePraticeCommentCreate.');
        }

        if (requestParameters.reqCreatePracticeComment === null || requestParameters.reqCreatePracticeComment === undefined) {
            throw new runtime.RequiredError('reqCreatePracticeComment','Required parameter requestParameters.reqCreatePracticeComment was null or undefined when calling postApiV1TapirHorsePraticeCommentCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/horse/pratice/comment/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreatePracticeCommentToJSON(requestParameters.reqCreatePracticeComment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirHorsePraticeCommentCreate(requestParameters: PostApiV1TapirHorsePraticeCommentCreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1TapirHorsePraticeCommentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirHorseSeriesGetpubliclistRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListHorseSeriesReturn>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tapir/horse/series/getPublicList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListHorseSeriesReturnFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirHorseSeriesGetpubliclist(initOverrides?: RequestInit): Promise<NoSqlPagingListHorseSeriesReturn> {
        const response = await this.postApiV1TapirHorseSeriesGetpubliclistRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirHorseSeriesQueryRaw(requestParameters: PostApiV1TapirHorseSeriesQueryRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturn>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirHorseSeriesQuery.');
        }

        if (requestParameters.reqQuerySeriesHorse === null || requestParameters.reqQuerySeriesHorse === undefined) {
            throw new runtime.RequiredError('reqQuerySeriesHorse','Required parameter requestParameters.reqQuerySeriesHorse was null or undefined when calling postApiV1TapirHorseSeriesQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/horse/series/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqQuerySeriesHorseToJSON(requestParameters.reqQuerySeriesHorse),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturnFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirHorseSeriesQuery(requestParameters: PostApiV1TapirHorseSeriesQueryRequest, initOverrides?: RequestInit): Promise<NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturn> {
        const response = await this.postApiV1TapirHorseSeriesQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirPracticeAppriseCreateRaw(requestParameters: PostApiV1TapirPracticeAppriseCreateRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirPracticeAppriseCreate.');
        }

        if (requestParameters.reqUpdatePracticeAppraise === null || requestParameters.reqUpdatePracticeAppraise === undefined) {
            throw new runtime.RequiredError('reqUpdatePracticeAppraise','Required parameter requestParameters.reqUpdatePracticeAppraise was null or undefined when calling postApiV1TapirPracticeAppriseCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/practice/apprise/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdatePracticeAppraiseToJSON(requestParameters.reqUpdatePracticeAppraise),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirPracticeAppriseCreate(requestParameters: PostApiV1TapirPracticeAppriseCreateRequest, initOverrides?: RequestInit): Promise<RetMsg> {
        const response = await this.postApiV1TapirPracticeAppriseCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
