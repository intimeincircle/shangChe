/* tslint:disable */
/* eslint-disable */
/**
 * title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CommonSearchContent
 */
export interface CommonSearchContent {
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    image?: string;
    /**
     * 
     * @type {number}
     * @memberof CommonSearchContent
     */
    rate?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CommonSearchContent
     */
    isDelete: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CommonSearchContent
     */
    isPublic: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof CommonSearchContent
     */
    tags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof CommonSearchContent
     */
    images?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    contentType?: string;
    /**
     * 
     * @type {number}
     * @memberof CommonSearchContent
     */
    updateAt?: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSearchContent
     */
    createAt?: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSearchContent
     */
    likeCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSearchContent
     */
    shareCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSearchContent
     */
    contentCount?: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSearchContent
     */
    charge?: number;
    /**
     * 
     * @type {number}
     * @memberof CommonSearchContent
     */
    commentCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    authorName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    authorDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    authorAvatar?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    authorId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    categoryName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    categoryId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommonSearchContent
     */
    text1?: string;
    /**
     * 
     * @type {number}
     * @memberof CommonSearchContent
     */
    double1?: number;
}

export function CommonSearchContentFromJSON(json: any): CommonSearchContent {
    return CommonSearchContentFromJSONTyped(json, false);
}

export function CommonSearchContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): CommonSearchContent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'rate': !exists(json, 'rate') ? undefined : json['rate'],
        'isDelete': json['isDelete'],
        'isPublic': json['isPublic'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'images': !exists(json, 'images') ? undefined : json['images'],
        'content': !exists(json, 'content') ? undefined : json['content'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'contentType': !exists(json, 'contentType') ? undefined : json['contentType'],
        'updateAt': !exists(json, 'updateAt') ? undefined : json['updateAt'],
        'createAt': !exists(json, 'createAt') ? undefined : json['createAt'],
        'likeCount': !exists(json, 'likeCount') ? undefined : json['likeCount'],
        'shareCount': !exists(json, 'shareCount') ? undefined : json['shareCount'],
        'contentCount': !exists(json, 'contentCount') ? undefined : json['contentCount'],
        'charge': !exists(json, 'charge') ? undefined : json['charge'],
        'commentCount': !exists(json, 'commentCount') ? undefined : json['commentCount'],
        'authorName': !exists(json, 'authorName') ? undefined : json['authorName'],
        'authorDescription': !exists(json, 'authorDescription') ? undefined : json['authorDescription'],
        'authorAvatar': !exists(json, 'authorAvatar') ? undefined : json['authorAvatar'],
        'authorId': !exists(json, 'authorId') ? undefined : json['authorId'],
        'categoryName': !exists(json, 'categoryName') ? undefined : json['categoryName'],
        'categoryId': !exists(json, 'categoryId') ? undefined : json['categoryId'],
        'text1': !exists(json, 'text1') ? undefined : json['text1'],
        'double1': !exists(json, 'double1') ? undefined : json['double1'],
    };
}

export function CommonSearchContentToJSON(value?: CommonSearchContent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'image': value.image,
        'rate': value.rate,
        'isDelete': value.isDelete,
        'isPublic': value.isPublic,
        'tags': value.tags,
        'images': value.images,
        'content': value.content,
        'description': value.description,
        'contentType': value.contentType,
        'updateAt': value.updateAt,
        'createAt': value.createAt,
        'likeCount': value.likeCount,
        'shareCount': value.shareCount,
        'contentCount': value.contentCount,
        'charge': value.charge,
        'commentCount': value.commentCount,
        'authorName': value.authorName,
        'authorDescription': value.authorDescription,
        'authorAvatar': value.authorAvatar,
        'authorId': value.authorId,
        'categoryName': value.categoryName,
        'categoryId': value.categoryId,
        'text1': value.text1,
        'double1': value.double1,
    };
}

