/* tslint:disable */
/* eslint-disable */
/**
 * title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    A1Return,
    A1ReturnFromJSON,
    A1ReturnToJSON,
    AddStarbuckGrouponTicket,
    AddStarbuckGrouponTicketFromJSON,
    AddStarbuckGrouponTicketToJSON,
    AglosticCaigouItem,
    AglosticCaigouItemFromJSON,
    AglosticCaigouItemToJSON,
    AglosticCaigouItemSigned,
    AglosticCaigouItemSignedFromJSON,
    AglosticCaigouItemSignedToJSON,
    AglosticCaigouItemSignedAndStarkbuckItem,
    AglosticCaigouItemSignedAndStarkbuckItemFromJSON,
    AglosticCaigouItemSignedAndStarkbuckItemToJSON,
    CreatePaymentHistory,
    CreatePaymentHistoryFromJSON,
    CreatePaymentHistoryToJSON,
    EnumeratumBenifitCardItem,
    EnumeratumBenifitCardItemFromJSON,
    EnumeratumBenifitCardItemToJSON,
    EnumeratumShandianOrderAllStatus,
    EnumeratumShandianOrderAllStatusFromJSON,
    EnumeratumShandianOrderAllStatusToJSON,
    EnumeratumStarbuckOrderPaidStatus,
    EnumeratumStarbuckOrderPaidStatusFromJSON,
    EnumeratumStarbuckOrderPaidStatusToJSON,
    GetRtcToken,
    GetRtcTokenFromJSON,
    GetRtcTokenToJSON,
    GetUserInfo,
    GetUserInfoFromJSON,
    GetUserInfoToJSON,
    KunExerciseList,
    KunExerciseListFromJSON,
    KunExerciseListToJSON,
    ListPaymentHistory,
    ListPaymentHistoryFromJSON,
    ListPaymentHistoryToJSON,
    NoSqlPagingListDataABGroup,
    NoSqlPagingListDataABGroupFromJSON,
    NoSqlPagingListDataABGroupToJSON,
    NoSqlPagingListDataASearchStore,
    NoSqlPagingListDataASearchStoreFromJSON,
    NoSqlPagingListDataASearchStoreToJSON,
    NoSqlPagingListDataKunCard,
    NoSqlPagingListDataKunCardFromJSON,
    NoSqlPagingListDataKunCardToJSON,
    NoSqlPagingListDataKunMessageReturn,
    NoSqlPagingListDataKunMessageReturnFromJSON,
    NoSqlPagingListDataKunMessageReturnToJSON,
    NoSqlPagingListDataKunSimpleOrder,
    NoSqlPagingListDataKunSimpleOrderFromJSON,
    NoSqlPagingListDataKunSimpleOrderToJSON,
    NoSqlPagingListDataKunUser,
    NoSqlPagingListDataKunUserFromJSON,
    NoSqlPagingListDataKunUserToJSON,
    NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturn,
    NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturnFromJSON,
    NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturnToJSON,
    NoSqlPagingListDataPageMarkShandianOrder,
    NoSqlPagingListDataPageMarkShandianOrderFromJSON,
    NoSqlPagingListDataPageMarkShandianOrderToJSON,
    NoSqlPagingListDataPageMarkStarbuckPaidOrder,
    NoSqlPagingListDataPageMarkStarbuckPaidOrderFromJSON,
    NoSqlPagingListDataPageMarkStarbuckPaidOrderToJSON,
    NoSqlPagingListDataShandianBrandItem,
    NoSqlPagingListDataShandianBrandItemFromJSON,
    NoSqlPagingListDataShandianBrandItemToJSON,
    NoSqlPagingListDataShandianItem,
    NoSqlPagingListDataShandianItemFromJSON,
    NoSqlPagingListDataShandianItemToJSON,
    NoSqlPagingListDataShopItemDescription,
    NoSqlPagingListDataShopItemDescriptionFromJSON,
    NoSqlPagingListDataShopItemDescriptionToJSON,
    NoSqlPagingListDataVipShopGroupItem,
    NoSqlPagingListDataVipShopGroupItemFromJSON,
    NoSqlPagingListDataVipShopGroupItemToJSON,
    NoSqlPagingListHorseSeriesReturn,
    NoSqlPagingListHorseSeriesReturnFromJSON,
    NoSqlPagingListHorseSeriesReturnToJSON,
    OptionDataBoolean,
    OptionDataBooleanFromJSON,
    OptionDataBooleanToJSON,
    OptionDataDetailRootInterface,
    OptionDataDetailRootInterfaceFromJSON,
    OptionDataDetailRootInterfaceToJSON,
    OptionDataIpInfoItem,
    OptionDataIpInfoItemFromJSON,
    OptionDataIpInfoItemToJSON,
    OptionDataKunAudioReadLog,
    OptionDataKunAudioReadLogFromJSON,
    OptionDataKunAudioReadLogToJSON,
    OptionDataKunBenefitCard,
    OptionDataKunBenefitCardFromJSON,
    OptionDataKunBenefitCardToJSON,
    OptionDataKunExercise,
    OptionDataKunExerciseFromJSON,
    OptionDataKunExerciseToJSON,
    OptionDataKunShandianOrderTask,
    OptionDataKunShandianOrderTaskFromJSON,
    OptionDataKunShandianOrderTaskToJSON,
    OptionDataKunSimpleOrder,
    OptionDataKunSimpleOrderFromJSON,
    OptionDataKunSimpleOrderToJSON,
    OptionDataKunUser,
    OptionDataKunUserFromJSON,
    OptionDataKunUserToJSON,
    OptionDataListListCommonSearchContent,
    OptionDataListListCommonSearchContentFromJSON,
    OptionDataListListCommonSearchContentToJSON,
    OptionDataMiniAppLoginToken,
    OptionDataMiniAppLoginTokenFromJSON,
    OptionDataMiniAppLoginTokenToJSON,
    OptionDataReqCreateShandianOrder,
    OptionDataReqCreateShandianOrderFromJSON,
    OptionDataReqCreateShandianOrderToJSON,
    OptionDataRetMiniAppUserItem,
    OptionDataRetMiniAppUserItemFromJSON,
    OptionDataRetMiniAppUserItemToJSON,
    OptionDataRetccessTokenApp,
    OptionDataRetccessTokenAppFromJSON,
    OptionDataRetccessTokenAppToJSON,
    OptionDataShandianOrder,
    OptionDataShandianOrderFromJSON,
    OptionDataShandianOrderToJSON,
    OptionDataStarbuckPaidOrder,
    OptionDataStarbuckPaidOrderFromJSON,
    OptionDataStarbuckPaidOrderToJSON,
    OptionDataStarbuckStoreItem,
    OptionDataStarbuckStoreItemFromJSON,
    OptionDataStarbuckStoreItemToJSON,
    OptionDataString,
    OptionDataStringFromJSON,
    OptionDataStringToJSON,
    OptionDataUUID,
    OptionDataUUIDFromJSON,
    OptionDataUUIDToJSON,
    OptionDataVipShopWechatPaymentItem,
    OptionDataVipShopWechatPaymentItemFromJSON,
    OptionDataVipShopWechatPaymentItemToJSON,
    OptionDataWechatPaymentItem,
    OptionDataWechatPaymentItemFromJSON,
    OptionDataWechatPaymentItemToJSON,
    ReqAddDeliverMessage,
    ReqAddDeliverMessageFromJSON,
    ReqAddDeliverMessageToJSON,
    ReqCreateCardComment1,
    ReqCreateCardComment1FromJSON,
    ReqCreateCardComment1ToJSON,
    ReqCreateConcern,
    ReqCreateConcernFromJSON,
    ReqCreateConcernToJSON,
    ReqCreateKunPinCard,
    ReqCreateKunPinCardFromJSON,
    ReqCreateKunPinCardToJSON,
    ReqCreatePracticeComment,
    ReqCreatePracticeCommentFromJSON,
    ReqCreatePracticeCommentToJSON,
    ReqCreateShandianOrder,
    ReqCreateShandianOrderFromJSON,
    ReqCreateShandianOrderToJSON,
    ReqDeleteKunPinCard,
    ReqDeleteKunPinCardFromJSON,
    ReqDeleteKunPinCardToJSON,
    ReqGetAudioLog,
    ReqGetAudioLogFromJSON,
    ReqGetAudioLogToJSON,
    ReqGetExerciseItem,
    ReqGetExerciseItemFromJSON,
    ReqGetExerciseItemToJSON,
    ReqGetHistoryMessage,
    ReqGetHistoryMessageFromJSON,
    ReqGetHistoryMessageToJSON,
    ReqMarkHorseRead,
    ReqMarkHorseReadFromJSON,
    ReqMarkHorseReadToJSON,
    ReqMarkUserDanger,
    ReqMarkUserDangerFromJSON,
    ReqMarkUserDangerToJSON,
    ReqQuerySeriesHorse,
    ReqQuerySeriesHorseFromJSON,
    ReqQuerySeriesHorseToJSON,
    ReqStarbuckGroupon,
    ReqStarbuckGrouponFromJSON,
    ReqStarbuckGrouponToJSON,
    ReqStartChat,
    ReqStartChatFromJSON,
    ReqStartChatToJSON,
    ReqStartVipOrder,
    ReqStartVipOrderFromJSON,
    ReqStartVipOrderToJSON,
    ReqUpdateAudioLog,
    ReqUpdateAudioLogFromJSON,
    ReqUpdateAudioLogToJSON,
    ReqUpdatePracticeAppraise,
    ReqUpdatePracticeAppraiseFromJSON,
    ReqUpdatePracticeAppraiseToJSON,
    ReqUpdateSeriesPrice,
    ReqUpdateSeriesPriceFromJSON,
    ReqUpdateSeriesPriceToJSON,
    RetMsg,
    RetMsgFromJSON,
    RetMsgToJSON,
    StarbuckStoreDetailADT,
    StarbuckStoreDetailADTFromJSON,
    StarbuckStoreDetailADTToJSON,
} from '../models';

export interface GetApiAuthV1TapirFuwuhaoOpenSignRequest {
    url: string;
}

export interface GetApiV1Chat50ChatGroupsRequest {
    authorization: string;
}

export interface GetApiV1Chat50ChatGroupsUserRequest {
    authorization: string;
}

export interface GetApiV1ConcernPractice52ListRequest {
    authorization: string;
}

export interface GetApiV1KunSubscribed50StatusRequest {
    input: string;
}

export interface GetApiV1KunSubscribed61StatusRequest {
    input: string;
}

export interface GetApiV1OrderKfcSearchRequest {
    lat: string;
    lon: string;
}

export interface GetApiV1OrderStarbuckIncomingRequest {
    timestamp: string;
    aopic: string;
    sign: string;
    fromPlatform?: string;
}

export interface GetApiV1OrderStarbuckSearchRequest {
    lat: string;
    lon: string;
}

export interface GetApiV1PinCard50ListRequest {
    seriesId: string;
}

export interface GetApiV1PinCard60ListRequest {
    seriesId: string;
}

export interface GetApiV1Search50HorseRequest {
    query: string;
}

export interface GetApiV1ShandianBenefitCardGetRequest {
    authorization: string;
    card: EnumeratumBenifitCardItem;
}

export interface GetApiV1ShandianBranchListRequest {
    authorization: string;
    query: string;
}

export interface GetApiV1ShandianItemOrderListByStatusRequest {
    authorization: string;
    status?: EnumeratumShandianOrderAllStatus;
}

export interface GetApiV1ShandianItemOrderTextCreateRequest {
    authorization: string;
    input: string;
}

export interface GetApiV1ShandianItemOrderUserRequest {
    authorization: string;
    status?: EnumeratumShandianOrderAllStatus;
}

export interface GetApiV1ShandianItemStarbuckListRequest {
    query: string;
}

export interface GetApiV1ShandianItemTaobaoListByStatusRequest {
    authorization: string;
    status?: EnumeratumStarbuckOrderPaidStatus;
}

export interface GetApiV1ShandianShandianOrderGetRequest {
    id: number;
}

export interface GetApiV1ShandianShandianTaobaoGetRequest {
    authorization: string;
    reqStarbuckGroupon: ReqStarbuckGroupon;
}

export interface GetApiV1ShandianTaobaoOrderGetRequest {
    uuid: string;
}

export interface GetApiV1ShandianTaobaoOrderTaskGetRequest {
    uuid: string;
}

export interface GetApiV1TapirHorseMembersRequest {
    authorization: string;
}

export interface GetApiV1ToolsIpGetRequest {
    ip: string;
}

export interface GetApiV1UserShandianMiniuserSessionGetRequest {
    authorization: string;
}

export interface GetApiV1UserShandianOpenSessionGetRequest {
    authorization: string;
}

export interface PostApiAuthV1TapirFuwuhaoOpenLoginRequest {
    code: string;
}

export interface PostApiTapirV1Chat50ChatMessagesHistoryRequest {
    authorization: string;
    reqGetHistoryMessage: ReqGetHistoryMessage;
}

export interface PostApiTapirV1Chat60ChatMessagesHistoryRequest {
    authorization: string;
    reqGetHistoryMessage: ReqGetHistoryMessage;
}

export interface PostApiTapirV1RtcChatRtcTokenGetRequest {
    authorization: string;
    getRtcToken: GetRtcToken;
}

export interface PostApiV1CardRead50MarkreadRequest {
    authorization: string;
    reqMarkHorseRead: ReqMarkHorseRead;
}

export interface PostApiV1Chat50ChatGroupRequest {
    authorization: string;
    reqStartChat: ReqStartChat;
}

export interface PostApiV1Chat60ChatGroupRequest {
    authorization: string;
    reqStartChat: ReqStartChat;
}

export interface PostApiV1Concern50CreateRequest {
    authorization: string;
    reqCreateConcern: ReqCreateConcern;
}

export interface PostApiV1Concern52CreateRequest {
    authorization: string;
    reqCreateConcern: ReqCreateConcern;
}

export interface PostApiV1Concern62CreateRequest {
    authorization: string;
    reqCreateConcern: ReqCreateConcern;
}

export interface PostApiV1HorseSeriesPriceRequest {
    reqUpdateSeriesPrice: ReqUpdateSeriesPrice;
}

export interface PostApiV1Order50PaymentListRequest {
    authorization: string;
    query: string;
    reqUpdatePracticeAppraise: ReqUpdatePracticeAppraise;
}

export interface PostApiV1OrderStarbuckGetRequest {
    authorization: string;
    id: number;
}

export interface PostApiV1PinCard50CreateRequest {
    reqCreateKunPinCard: ReqCreateKunPinCard;
    hi?: string;
}

export interface PostApiV1PinCard50DeleteRequest {
    reqDeleteKunPinCard: ReqDeleteKunPinCard;
}

export interface PostApiV1PinCard60CreateRequest {
    reqCreateKunPinCard: ReqCreateKunPinCard;
    hi?: string;
}

export interface PostApiV1PinCard60DeleteRequest {
    reqDeleteKunPinCard: ReqDeleteKunPinCard;
}

export interface PostApiV1ShandianAnonymousItemOrderCreateRequest {
    reqCreateShandianOrder: ReqCreateShandianOrder;
}

export interface PostApiV1ShandianAutoSignPaymentItemidCaigouRequest {
    itemId: string;
    aglosticCaigouItemSigned: AglosticCaigouItemSigned;
}

export interface PostApiV1ShandianItemOrderCreateRequest {
    authorization: string;
    reqCreateShandianOrder: ReqCreateShandianOrder;
}

export interface PostApiV1ShandianItemOrderDeliveryRequest {
    authorization: string;
    reqAddDeliverMessage: ReqAddDeliverMessage;
}

export interface PostApiV1ShandianShandianPaymentStartRequest {
    authorization: string;
    createPaymentHistory: CreatePaymentHistory;
}

export interface PostApiV1ShandianShopPaymentCallbackRequest {
    orderno: string;
    outorderno: string;
    userid: string;
    status: string;
    refundstatus: string;
    money: string;
    receipt: string;
    createTime: string;
    updateTime: string;
    timestamp: string;
    sign: string;
    refundmoney?: string;
    refundreceipt?: string;
}

export interface PostApiV1ShandianSimpleOrderGetRequest {
    authorization: string;
}

export interface PostApiV1ShandianStarbuckOrderCaigouCoffeeRequest {
    aglosticCaigouItemSignedAndStarkbuckItem: AglosticCaigouItemSignedAndStarkbuckItem;
}

export interface PostApiV1ShandianTaobaoOrderCreateRequest {
    addStarbuckGrouponTicket: AddStarbuckGrouponTicket;
}

export interface PostApiV1ShandianVipShopGoodsRequest {
    group?: number;
    name?: string;
}

export interface PostApiV1ShandianVipShopItemGoodidRequest {
    goodid: number;
}

export interface PostApiV1ShandianVipShopOrderOrderidRequest {
    authorization: string;
    orderId: string;
}

export interface PostApiV1ShandianXianyuPaymentItemidCaigouRequest {
    itemId: string;
    aglosticCaigouItem: AglosticCaigouItem;
}

export interface PostApiV1TapirAdmin50SecurityCreateRequest {
    authorization: string;
    reqMarkUserDanger: ReqMarkUserDanger;
}

export interface PostApiV1TapirCardDio50OffsetCreateRequest {
    authorization: string;
    reqUpdateAudioLog: ReqUpdateAudioLog;
}

export interface PostApiV1TapirCardDio50OffsetGetRequest {
    authorization: string;
    reqGetAudioLog: ReqGetAudioLog;
}

export interface PostApiV1TapirCardDio60OffsetCreateRequest {
    authorization: string;
    reqUpdateAudioLog: ReqUpdateAudioLog;
}

export interface PostApiV1TapirCardDio60OffsetGetRequest {
    authorization: string;
    reqGetAudioLog: ReqGetAudioLog;
}

export interface PostApiV1TapirHorseCommentCreateRequest {
    authorization: string;
    reqCreateCardComment1: ReqCreateCardComment1;
}

export interface PostApiV1TapirHorseExerciseItemRequest {
    authorization: string;
    reqGetExerciseItem: ReqGetExerciseItem;
}

export interface PostApiV1TapirHorsePraticeCommentCreateRequest {
    authorization: string;
    reqCreatePracticeComment: ReqCreatePracticeComment;
}

export interface PostApiV1TapirHorseSeriesQueryRequest {
    authorization: string;
    reqQuerySeriesHorse: ReqQuerySeriesHorse;
}

export interface PostApiV1TapirMiniAppLoginRequest {
    code: string;
}

export interface PostApiV1TapirMiniAppUserinfoGetRequest {
    getUserInfo: GetUserInfo;
}

export interface PostApiV1TapirPracticeAppriseCreateRequest {
    authorization: string;
    reqUpdatePracticeAppraise: ReqUpdatePracticeAppraise;
}

export interface PostApiV1TestRequest {
    reqCreateShandianOrder: ReqCreateShandianOrder;
}

export interface PostApiV1VipShopOrderStartRequest {
    authorization: string;
    reqStartVipOrder: ReqStartVipOrder;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async getApiAuthV1TapirFuwuhaoOpenSignRaw(requestParameters: GetApiAuthV1TapirFuwuhaoOpenSignRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataRetccessTokenApp>> {
        if (requestParameters.url === null || requestParameters.url === undefined) {
            throw new runtime.RequiredError('url','Required parameter requestParameters.url was null or undefined when calling getApiAuthV1TapirFuwuhaoOpenSign.');
        }

        const queryParameters: any = {};

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-auth/v1/tapir/fuwuhao/open/sign`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataRetccessTokenAppFromJSON(jsonValue));
    }

    /**
     */
    async getApiAuthV1TapirFuwuhaoOpenSign(requestParameters: GetApiAuthV1TapirFuwuhaoOpenSignRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataRetccessTokenApp> {
        const response = await this.getApiAuthV1TapirFuwuhaoOpenSignRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1Chat50ChatGroupsRaw(requestParameters: GetApiV1Chat50ChatGroupsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataABGroup>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1Chat50ChatGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/chat/50/chat/groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataABGroupFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1Chat50ChatGroups(requestParameters: GetApiV1Chat50ChatGroupsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataABGroup> {
        const response = await this.getApiV1Chat50ChatGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1Chat50ChatGroupsUserRaw(requestParameters: GetApiV1Chat50ChatGroupsUserRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataKunUser>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1Chat50ChatGroupsUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/chat/50/chat/groups-user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunUserFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1Chat50ChatGroupsUser(requestParameters: GetApiV1Chat50ChatGroupsUserRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataKunUser> {
        const response = await this.getApiV1Chat50ChatGroupsUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ConcernPractice52ListRaw(requestParameters: GetApiV1ConcernPractice52ListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<KunExerciseList>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ConcernPractice52List.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/concern/practice/52/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => KunExerciseListFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ConcernPractice52List(requestParameters: GetApiV1ConcernPractice52ListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<KunExerciseList> {
        const response = await this.getApiV1ConcernPractice52ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1KunSubscribed50StatusRaw(requestParameters: GetApiV1KunSubscribed50StatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataBoolean>> {
        if (requestParameters.input === null || requestParameters.input === undefined) {
            throw new runtime.RequiredError('input','Required parameter requestParameters.input was null or undefined when calling getApiV1KunSubscribed50Status.');
        }

        const queryParameters: any = {};

        if (requestParameters.input !== undefined) {
            queryParameters['input'] = requestParameters.input;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/kun/subscribed/50/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataBooleanFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1KunSubscribed50Status(requestParameters: GetApiV1KunSubscribed50StatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataBoolean> {
        const response = await this.getApiV1KunSubscribed50StatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1KunSubscribed61StatusRaw(requestParameters: GetApiV1KunSubscribed61StatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataBoolean>> {
        if (requestParameters.input === null || requestParameters.input === undefined) {
            throw new runtime.RequiredError('input','Required parameter requestParameters.input was null or undefined when calling getApiV1KunSubscribed61Status.');
        }

        const queryParameters: any = {};

        if (requestParameters.input !== undefined) {
            queryParameters['input'] = requestParameters.input;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/kun/subscribed/61/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataBooleanFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1KunSubscribed61Status(requestParameters: GetApiV1KunSubscribed61StatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataBoolean> {
        const response = await this.getApiV1KunSubscribed61StatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1OrderKfcSearchRaw(requestParameters: GetApiV1OrderKfcSearchRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataASearchStore>> {
        if (requestParameters.lat === null || requestParameters.lat === undefined) {
            throw new runtime.RequiredError('lat','Required parameter requestParameters.lat was null or undefined when calling getApiV1OrderKfcSearch.');
        }

        if (requestParameters.lon === null || requestParameters.lon === undefined) {
            throw new runtime.RequiredError('lon','Required parameter requestParameters.lon was null or undefined when calling getApiV1OrderKfcSearch.');
        }

        const queryParameters: any = {};

        if (requestParameters.lat !== undefined) {
            queryParameters['lat'] = requestParameters.lat;
        }

        if (requestParameters.lon !== undefined) {
            queryParameters['lon'] = requestParameters.lon;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/order/kfc/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataASearchStoreFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1OrderKfcSearch(requestParameters: GetApiV1OrderKfcSearchRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataASearchStore> {
        const response = await this.getApiV1OrderKfcSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1OrderStarbuckIncomingRaw(requestParameters: GetApiV1OrderStarbuckIncomingRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<A1Return>> {
        if (requestParameters.timestamp === null || requestParameters.timestamp === undefined) {
            throw new runtime.RequiredError('timestamp','Required parameter requestParameters.timestamp was null or undefined when calling getApiV1OrderStarbuckIncoming.');
        }

        if (requestParameters.aopic === null || requestParameters.aopic === undefined) {
            throw new runtime.RequiredError('aopic','Required parameter requestParameters.aopic was null or undefined when calling getApiV1OrderStarbuckIncoming.');
        }

        if (requestParameters.sign === null || requestParameters.sign === undefined) {
            throw new runtime.RequiredError('sign','Required parameter requestParameters.sign was null or undefined when calling getApiV1OrderStarbuckIncoming.');
        }

        const queryParameters: any = {};

        if (requestParameters.fromPlatform !== undefined) {
            queryParameters['fromPlatform'] = requestParameters.fromPlatform;
        }

        if (requestParameters.timestamp !== undefined) {
            queryParameters['timestamp'] = requestParameters.timestamp;
        }

        if (requestParameters.aopic !== undefined) {
            queryParameters['aopic'] = requestParameters.aopic;
        }

        if (requestParameters.sign !== undefined) {
            queryParameters['sign'] = requestParameters.sign;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/order/starbuck/incoming`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => A1ReturnFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1OrderStarbuckIncoming(requestParameters: GetApiV1OrderStarbuckIncomingRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<A1Return> {
        const response = await this.getApiV1OrderStarbuckIncomingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1OrderStarbuckSearchRaw(requestParameters: GetApiV1OrderStarbuckSearchRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataStarbuckStoreItem>> {
        if (requestParameters.lat === null || requestParameters.lat === undefined) {
            throw new runtime.RequiredError('lat','Required parameter requestParameters.lat was null or undefined when calling getApiV1OrderStarbuckSearch.');
        }

        if (requestParameters.lon === null || requestParameters.lon === undefined) {
            throw new runtime.RequiredError('lon','Required parameter requestParameters.lon was null or undefined when calling getApiV1OrderStarbuckSearch.');
        }

        const queryParameters: any = {};

        if (requestParameters.lat !== undefined) {
            queryParameters['lat'] = requestParameters.lat;
        }

        if (requestParameters.lon !== undefined) {
            queryParameters['lon'] = requestParameters.lon;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/order/starbuck/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataStarbuckStoreItemFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1OrderStarbuckSearch(requestParameters: GetApiV1OrderStarbuckSearchRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataStarbuckStoreItem> {
        const response = await this.getApiV1OrderStarbuckSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1PinCard50ListRaw(requestParameters: GetApiV1PinCard50ListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataKunCard>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getApiV1PinCard50List.');
        }

        const queryParameters: any = {};

        if (requestParameters.seriesId !== undefined) {
            queryParameters['seriesId'] = requestParameters.seriesId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pin-card/50/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunCardFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1PinCard50List(requestParameters: GetApiV1PinCard50ListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataKunCard> {
        const response = await this.getApiV1PinCard50ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1PinCard60ListRaw(requestParameters: GetApiV1PinCard60ListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataKunCard>> {
        if (requestParameters.seriesId === null || requestParameters.seriesId === undefined) {
            throw new runtime.RequiredError('seriesId','Required parameter requestParameters.seriesId was null or undefined when calling getApiV1PinCard60List.');
        }

        const queryParameters: any = {};

        if (requestParameters.seriesId !== undefined) {
            queryParameters['seriesId'] = requestParameters.seriesId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pin-card/60/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunCardFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1PinCard60List(requestParameters: GetApiV1PinCard60ListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataKunCard> {
        const response = await this.getApiV1PinCard60ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1Search50HorseRaw(requestParameters: GetApiV1Search50HorseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataListListCommonSearchContent>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling getApiV1Search50Horse.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/search/50/horse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataListListCommonSearchContentFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1Search50Horse(requestParameters: GetApiV1Search50HorseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataListListCommonSearchContent> {
        const response = await this.getApiV1Search50HorseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianBenefitCardGetRaw(requestParameters: GetApiV1ShandianBenefitCardGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataKunBenefitCard>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianBenefitCardGet.');
        }

        if (requestParameters.card === null || requestParameters.card === undefined) {
            throw new runtime.RequiredError('card','Required parameter requestParameters.card was null or undefined when calling getApiV1ShandianBenefitCardGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.card !== undefined) {
            queryParameters['card'] = requestParameters.card;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/benefit-card/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunBenefitCardFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianBenefitCardGet(requestParameters: GetApiV1ShandianBenefitCardGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataKunBenefitCard> {
        const response = await this.getApiV1ShandianBenefitCardGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianBranchListRaw(requestParameters: GetApiV1ShandianBranchListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataShandianBrandItem>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianBranchList.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling getApiV1ShandianBranchList.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/branch/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataShandianBrandItemFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianBranchList(requestParameters: GetApiV1ShandianBranchListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataShandianBrandItem> {
        const response = await this.getApiV1ShandianBranchListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianItemOrderListByStatusRaw(requestParameters: GetApiV1ShandianItemOrderListByStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataPageMarkShandianOrder>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianItemOrderListByStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/order/list_by_status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataPageMarkShandianOrderFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianItemOrderListByStatus(requestParameters: GetApiV1ShandianItemOrderListByStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataPageMarkShandianOrder> {
        const response = await this.getApiV1ShandianItemOrderListByStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianItemOrderTextCreateRaw(requestParameters: GetApiV1ShandianItemOrderTextCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataReqCreateShandianOrder>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianItemOrderTextCreate.');
        }

        if (requestParameters.input === null || requestParameters.input === undefined) {
            throw new runtime.RequiredError('input','Required parameter requestParameters.input was null or undefined when calling getApiV1ShandianItemOrderTextCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.input !== undefined) {
            queryParameters['input'] = requestParameters.input;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/order/text/create`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataReqCreateShandianOrderFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianItemOrderTextCreate(requestParameters: GetApiV1ShandianItemOrderTextCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataReqCreateShandianOrder> {
        const response = await this.getApiV1ShandianItemOrderTextCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianItemOrderUserRaw(requestParameters: GetApiV1ShandianItemOrderUserRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataPageMarkShandianOrder>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianItemOrderUser.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/order/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataPageMarkShandianOrderFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianItemOrderUser(requestParameters: GetApiV1ShandianItemOrderUserRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataPageMarkShandianOrder> {
        const response = await this.getApiV1ShandianItemOrderUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianItemStarbuckListRaw(requestParameters: GetApiV1ShandianItemStarbuckListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataShandianItem>> {
        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling getApiV1ShandianItemStarbuckList.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/shandian/item/starbuck/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataShandianItemFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianItemStarbuckList(requestParameters: GetApiV1ShandianItemStarbuckListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataShandianItem> {
        const response = await this.getApiV1ShandianItemStarbuckListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianItemTaobaoListByStatusRaw(requestParameters: GetApiV1ShandianItemTaobaoListByStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataPageMarkStarbuckPaidOrder>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianItemTaobaoListByStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/taobao/list_by_status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataPageMarkStarbuckPaidOrderFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianItemTaobaoListByStatus(requestParameters: GetApiV1ShandianItemTaobaoListByStatusRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataPageMarkStarbuckPaidOrder> {
        const response = await this.getApiV1ShandianItemTaobaoListByStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get kun order for shandian
     */
    async getApiV1ShandianShandianOrderGetRaw(requestParameters: GetApiV1ShandianShandianOrderGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataShandianOrder>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApiV1ShandianShandianOrderGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/shandian/shandian/order/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataShandianOrderFromJSON(jsonValue));
    }

    /**
     * get kun order for shandian
     */
    async getApiV1ShandianShandianOrderGet(requestParameters: GetApiV1ShandianShandianOrderGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataShandianOrder> {
        const response = await this.getApiV1ShandianShandianOrderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianShandianTaobaoGetRaw(requestParameters: GetApiV1ShandianShandianTaobaoGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1ShandianShandianTaobaoGet.');
        }

        if (requestParameters.reqStarbuckGroupon === null || requestParameters.reqStarbuckGroupon === undefined) {
            throw new runtime.RequiredError('reqStarbuckGroupon','Required parameter requestParameters.reqStarbuckGroupon was null or undefined when calling getApiV1ShandianShandianTaobaoGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/shandian/taobao/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: ReqStarbuckGrouponToJSON(requestParameters.reqStarbuckGroupon),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianShandianTaobaoGet(requestParameters: GetApiV1ShandianShandianTaobaoGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.getApiV1ShandianShandianTaobaoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ShandianTaobaoOrderGetRaw(requestParameters: GetApiV1ShandianTaobaoOrderGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataStarbuckPaidOrder>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getApiV1ShandianTaobaoOrderGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.uuid !== undefined) {
            queryParameters['uuid'] = requestParameters.uuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/shandian/taobao/order/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataStarbuckPaidOrderFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ShandianTaobaoOrderGet(requestParameters: GetApiV1ShandianTaobaoOrderGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataStarbuckPaidOrder> {
        const response = await this.getApiV1ShandianTaobaoOrderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get kun order & task for shandian
     */
    async getApiV1ShandianTaobaoOrderTaskGetRaw(requestParameters: GetApiV1ShandianTaobaoOrderTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataKunShandianOrderTask>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getApiV1ShandianTaobaoOrderTaskGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.uuid !== undefined) {
            queryParameters['uuid'] = requestParameters.uuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/shandian/taobao/order-task/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunShandianOrderTaskFromJSON(jsonValue));
    }

    /**
     * get kun order & task for shandian
     */
    async getApiV1ShandianTaobaoOrderTaskGet(requestParameters: GetApiV1ShandianTaobaoOrderTaskGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataKunShandianOrderTask> {
        const response = await this.getApiV1ShandianTaobaoOrderTaskGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1TapirHorseMembersRaw(requestParameters: GetApiV1TapirHorseMembersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataKunUser>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1TapirHorseMembers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/horse/members`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunUserFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1TapirHorseMembers(requestParameters: GetApiV1TapirHorseMembersRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataKunUser> {
        const response = await this.getApiV1TapirHorseMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1ToolsIpGetRaw(requestParameters: GetApiV1ToolsIpGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataIpInfoItem>> {
        if (requestParameters.ip === null || requestParameters.ip === undefined) {
            throw new runtime.RequiredError('ip','Required parameter requestParameters.ip was null or undefined when calling getApiV1ToolsIpGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.ip !== undefined) {
            queryParameters['ip'] = requestParameters.ip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tools/ip/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataIpInfoItemFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1ToolsIpGet(requestParameters: GetApiV1ToolsIpGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataIpInfoItem> {
        const response = await this.getApiV1ToolsIpGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1UserShandianMiniuserSessionGetRaw(requestParameters: GetApiV1UserShandianMiniuserSessionGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataKunUser>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1UserShandianMiniuserSessionGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/user/shandian-miniUser/session/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunUserFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1UserShandianMiniuserSessionGet(requestParameters: GetApiV1UserShandianMiniuserSessionGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataKunUser> {
        const response = await this.getApiV1UserShandianMiniuserSessionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiV1UserShandianOpenSessionGetRaw(requestParameters: GetApiV1UserShandianOpenSessionGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataKunUser>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getApiV1UserShandianOpenSessionGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/user/shandian-open/session/get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunUserFromJSON(jsonValue));
    }

    /**
     */
    async getApiV1UserShandianOpenSessionGet(requestParameters: GetApiV1UserShandianOpenSessionGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataKunUser> {
        const response = await this.getApiV1UserShandianOpenSessionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiAuthV1TapirFuwuhaoOpenLoginRaw(requestParameters: PostApiAuthV1TapirFuwuhaoOpenLoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling postApiAuthV1TapirFuwuhaoOpenLogin.');
        }

        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api-auth/v1/tapir/fuwuhao/open/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiAuthV1TapirFuwuhaoOpenLogin(requestParameters: PostApiAuthV1TapirFuwuhaoOpenLoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiAuthV1TapirFuwuhaoOpenLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiTapirV1Chat50ChatMessagesHistoryRaw(requestParameters: PostApiTapirV1Chat50ChatMessagesHistoryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataKunMessageReturn>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiTapirV1Chat50ChatMessagesHistory.');
        }

        if (requestParameters.reqGetHistoryMessage === null || requestParameters.reqGetHistoryMessage === undefined) {
            throw new runtime.RequiredError('reqGetHistoryMessage','Required parameter requestParameters.reqGetHistoryMessage was null or undefined when calling postApiTapirV1Chat50ChatMessagesHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/tapir/v1/chat/50/chat/messages/history`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqGetHistoryMessageToJSON(requestParameters.reqGetHistoryMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunMessageReturnFromJSON(jsonValue));
    }

    /**
     */
    async postApiTapirV1Chat50ChatMessagesHistory(requestParameters: PostApiTapirV1Chat50ChatMessagesHistoryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataKunMessageReturn> {
        const response = await this.postApiTapirV1Chat50ChatMessagesHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiTapirV1Chat60ChatMessagesHistoryRaw(requestParameters: PostApiTapirV1Chat60ChatMessagesHistoryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataKunMessageReturn>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiTapirV1Chat60ChatMessagesHistory.');
        }

        if (requestParameters.reqGetHistoryMessage === null || requestParameters.reqGetHistoryMessage === undefined) {
            throw new runtime.RequiredError('reqGetHistoryMessage','Required parameter requestParameters.reqGetHistoryMessage was null or undefined when calling postApiTapirV1Chat60ChatMessagesHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/tapir/v1/chat/60/chat/messages/history`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqGetHistoryMessageToJSON(requestParameters.reqGetHistoryMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunMessageReturnFromJSON(jsonValue));
    }

    /**
     */
    async postApiTapirV1Chat60ChatMessagesHistory(requestParameters: PostApiTapirV1Chat60ChatMessagesHistoryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataKunMessageReturn> {
        const response = await this.postApiTapirV1Chat60ChatMessagesHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiTapirV1RtcChatRtcTokenGetRaw(requestParameters: PostApiTapirV1RtcChatRtcTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataString>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiTapirV1RtcChatRtcTokenGet.');
        }

        if (requestParameters.getRtcToken === null || requestParameters.getRtcToken === undefined) {
            throw new runtime.RequiredError('getRtcToken','Required parameter requestParameters.getRtcToken was null or undefined when calling postApiTapirV1RtcChatRtcTokenGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/tapir/v1/rtc/chat/rtc/token/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetRtcTokenToJSON(requestParameters.getRtcToken),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataStringFromJSON(jsonValue));
    }

    /**
     */
    async postApiTapirV1RtcChatRtcTokenGet(requestParameters: PostApiTapirV1RtcChatRtcTokenGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataString> {
        const response = await this.postApiTapirV1RtcChatRtcTokenGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1CardRead50MarkreadRaw(requestParameters: PostApiV1CardRead50MarkreadRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1CardRead50Markread.');
        }

        if (requestParameters.reqMarkHorseRead === null || requestParameters.reqMarkHorseRead === undefined) {
            throw new runtime.RequiredError('reqMarkHorseRead','Required parameter requestParameters.reqMarkHorseRead was null or undefined when calling postApiV1CardRead50Markread.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/card/read/50/markRead`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqMarkHorseReadToJSON(requestParameters.reqMarkHorseRead),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1CardRead50Markread(requestParameters: PostApiV1CardRead50MarkreadRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1CardRead50MarkreadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Chat50ChatGroupRaw(requestParameters: PostApiV1Chat50ChatGroupRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataUUID>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Chat50ChatGroup.');
        }

        if (requestParameters.reqStartChat === null || requestParameters.reqStartChat === undefined) {
            throw new runtime.RequiredError('reqStartChat','Required parameter requestParameters.reqStartChat was null or undefined when calling postApiV1Chat50ChatGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/chat/50/chat/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqStartChatToJSON(requestParameters.reqStartChat),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataUUIDFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Chat50ChatGroup(requestParameters: PostApiV1Chat50ChatGroupRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataUUID> {
        const response = await this.postApiV1Chat50ChatGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Chat60ChatGroupRaw(requestParameters: PostApiV1Chat60ChatGroupRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataUUID>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Chat60ChatGroup.');
        }

        if (requestParameters.reqStartChat === null || requestParameters.reqStartChat === undefined) {
            throw new runtime.RequiredError('reqStartChat','Required parameter requestParameters.reqStartChat was null or undefined when calling postApiV1Chat60ChatGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/chat/60/chat/group`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqStartChatToJSON(requestParameters.reqStartChat),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataUUIDFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Chat60ChatGroup(requestParameters: PostApiV1Chat60ChatGroupRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataUUID> {
        const response = await this.postApiV1Chat60ChatGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Concern50CreateRaw(requestParameters: PostApiV1Concern50CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Concern50Create.');
        }

        if (requestParameters.reqCreateConcern === null || requestParameters.reqCreateConcern === undefined) {
            throw new runtime.RequiredError('reqCreateConcern','Required parameter requestParameters.reqCreateConcern was null or undefined when calling postApiV1Concern50Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/concern/50/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateConcernToJSON(requestParameters.reqCreateConcern),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Concern50Create(requestParameters: PostApiV1Concern50CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1Concern50CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Concern52CreateRaw(requestParameters: PostApiV1Concern52CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Concern52Create.');
        }

        if (requestParameters.reqCreateConcern === null || requestParameters.reqCreateConcern === undefined) {
            throw new runtime.RequiredError('reqCreateConcern','Required parameter requestParameters.reqCreateConcern was null or undefined when calling postApiV1Concern52Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/concern/52/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateConcernToJSON(requestParameters.reqCreateConcern),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Concern52Create(requestParameters: PostApiV1Concern52CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1Concern52CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Concern62CreateRaw(requestParameters: PostApiV1Concern62CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Concern62Create.');
        }

        if (requestParameters.reqCreateConcern === null || requestParameters.reqCreateConcern === undefined) {
            throw new runtime.RequiredError('reqCreateConcern','Required parameter requestParameters.reqCreateConcern was null or undefined when calling postApiV1Concern62Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/concern/62/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateConcernToJSON(requestParameters.reqCreateConcern),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Concern62Create(requestParameters: PostApiV1Concern62CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1Concern62CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1HorseSeriesPriceRaw(requestParameters: PostApiV1HorseSeriesPriceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqUpdateSeriesPrice === null || requestParameters.reqUpdateSeriesPrice === undefined) {
            throw new runtime.RequiredError('reqUpdateSeriesPrice','Required parameter requestParameters.reqUpdateSeriesPrice was null or undefined when calling postApiV1HorseSeriesPrice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/horse/series/price`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdateSeriesPriceToJSON(requestParameters.reqUpdateSeriesPrice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1HorseSeriesPrice(requestParameters: PostApiV1HorseSeriesPriceRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1HorseSeriesPriceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1Order50PaymentListRaw(requestParameters: PostApiV1Order50PaymentListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ListPaymentHistory>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1Order50PaymentList.');
        }

        if (requestParameters.query === null || requestParameters.query === undefined) {
            throw new runtime.RequiredError('query','Required parameter requestParameters.query was null or undefined when calling postApiV1Order50PaymentList.');
        }

        if (requestParameters.reqUpdatePracticeAppraise === null || requestParameters.reqUpdatePracticeAppraise === undefined) {
            throw new runtime.RequiredError('reqUpdatePracticeAppraise','Required parameter requestParameters.reqUpdatePracticeAppraise was null or undefined when calling postApiV1Order50PaymentList.');
        }

        const queryParameters: any = {};

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/order/50/payment/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdatePracticeAppraiseToJSON(requestParameters.reqUpdatePracticeAppraise),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListPaymentHistoryFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Order50PaymentList(requestParameters: PostApiV1Order50PaymentListRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ListPaymentHistory> {
        const response = await this.postApiV1Order50PaymentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1OrderStarbuckGetRaw(requestParameters: PostApiV1OrderStarbuckGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StarbuckStoreDetailADT>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1OrderStarbuckGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postApiV1OrderStarbuckGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/order/starbuck/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StarbuckStoreDetailADTFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1OrderStarbuckGet(requestParameters: PostApiV1OrderStarbuckGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StarbuckStoreDetailADT> {
        const response = await this.postApiV1OrderStarbuckGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1PinCard50CreateRaw(requestParameters: PostApiV1PinCard50CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqCreateKunPinCard === null || requestParameters.reqCreateKunPinCard === undefined) {
            throw new runtime.RequiredError('reqCreateKunPinCard','Required parameter requestParameters.reqCreateKunPinCard was null or undefined when calling postApiV1PinCard50Create.');
        }

        const queryParameters: any = {};

        if (requestParameters.hi !== undefined) {
            queryParameters['hi'] = requestParameters.hi;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/pin-card/50/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateKunPinCardToJSON(requestParameters.reqCreateKunPinCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1PinCard50Create(requestParameters: PostApiV1PinCard50CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1PinCard50CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1PinCard50DeleteRaw(requestParameters: PostApiV1PinCard50DeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqDeleteKunPinCard === null || requestParameters.reqDeleteKunPinCard === undefined) {
            throw new runtime.RequiredError('reqDeleteKunPinCard','Required parameter requestParameters.reqDeleteKunPinCard was null or undefined when calling postApiV1PinCard50Delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/pin-card/50/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqDeleteKunPinCardToJSON(requestParameters.reqDeleteKunPinCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1PinCard50Delete(requestParameters: PostApiV1PinCard50DeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1PinCard50DeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1PinCard60CreateRaw(requestParameters: PostApiV1PinCard60CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqCreateKunPinCard === null || requestParameters.reqCreateKunPinCard === undefined) {
            throw new runtime.RequiredError('reqCreateKunPinCard','Required parameter requestParameters.reqCreateKunPinCard was null or undefined when calling postApiV1PinCard60Create.');
        }

        const queryParameters: any = {};

        if (requestParameters.hi !== undefined) {
            queryParameters['hi'] = requestParameters.hi;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/pin-card/60/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateKunPinCardToJSON(requestParameters.reqCreateKunPinCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1PinCard60Create(requestParameters: PostApiV1PinCard60CreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1PinCard60CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1PinCard60DeleteRaw(requestParameters: PostApiV1PinCard60DeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqDeleteKunPinCard === null || requestParameters.reqDeleteKunPinCard === undefined) {
            throw new runtime.RequiredError('reqDeleteKunPinCard','Required parameter requestParameters.reqDeleteKunPinCard was null or undefined when calling postApiV1PinCard60Delete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/pin-card/60/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqDeleteKunPinCardToJSON(requestParameters.reqDeleteKunPinCard),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1PinCard60Delete(requestParameters: PostApiV1PinCard60DeleteRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1PinCard60DeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianAnonymousItemOrderCreateRaw(requestParameters: PostApiV1ShandianAnonymousItemOrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqCreateShandianOrder === null || requestParameters.reqCreateShandianOrder === undefined) {
            throw new runtime.RequiredError('reqCreateShandianOrder','Required parameter requestParameters.reqCreateShandianOrder was null or undefined when calling postApiV1ShandianAnonymousItemOrderCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/shandian/anonymous/item/order/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateShandianOrderToJSON(requestParameters.reqCreateShandianOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianAnonymousItemOrderCreate(requestParameters: PostApiV1ShandianAnonymousItemOrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1ShandianAnonymousItemOrderCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianAutoSignPaymentItemidCaigouRaw(requestParameters: PostApiV1ShandianAutoSignPaymentItemidCaigouRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataString>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling postApiV1ShandianAutoSignPaymentItemidCaigou.');
        }

        if (requestParameters.aglosticCaigouItemSigned === null || requestParameters.aglosticCaigouItemSigned === undefined) {
            throw new runtime.RequiredError('aglosticCaigouItemSigned','Required parameter requestParameters.aglosticCaigouItemSigned was null or undefined when calling postApiV1ShandianAutoSignPaymentItemidCaigou.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/shandian/auto-sign/payment/{itemId}/caigou`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AglosticCaigouItemSignedToJSON(requestParameters.aglosticCaigouItemSigned),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataStringFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianAutoSignPaymentItemidCaigou(requestParameters: PostApiV1ShandianAutoSignPaymentItemidCaigouRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataString> {
        const response = await this.postApiV1ShandianAutoSignPaymentItemidCaigouRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianItemOrderCreateRaw(requestParameters: PostApiV1ShandianItemOrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1ShandianItemOrderCreate.');
        }

        if (requestParameters.reqCreateShandianOrder === null || requestParameters.reqCreateShandianOrder === undefined) {
            throw new runtime.RequiredError('reqCreateShandianOrder','Required parameter requestParameters.reqCreateShandianOrder was null or undefined when calling postApiV1ShandianItemOrderCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/order/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateShandianOrderToJSON(requestParameters.reqCreateShandianOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianItemOrderCreate(requestParameters: PostApiV1ShandianItemOrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1ShandianItemOrderCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianItemOrderDeliveryRaw(requestParameters: PostApiV1ShandianItemOrderDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1ShandianItemOrderDelivery.');
        }

        if (requestParameters.reqAddDeliverMessage === null || requestParameters.reqAddDeliverMessage === undefined) {
            throw new runtime.RequiredError('reqAddDeliverMessage','Required parameter requestParameters.reqAddDeliverMessage was null or undefined when calling postApiV1ShandianItemOrderDelivery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/item/order/delivery`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqAddDeliverMessageToJSON(requestParameters.reqAddDeliverMessage),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianItemOrderDelivery(requestParameters: PostApiV1ShandianItemOrderDeliveryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1ShandianItemOrderDeliveryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianShandianPaymentStartRaw(requestParameters: PostApiV1ShandianShandianPaymentStartRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataWechatPaymentItem>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1ShandianShandianPaymentStart.');
        }

        if (requestParameters.createPaymentHistory === null || requestParameters.createPaymentHistory === undefined) {
            throw new runtime.RequiredError('createPaymentHistory','Required parameter requestParameters.createPaymentHistory was null or undefined when calling postApiV1ShandianShandianPaymentStart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/shandian/payment/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePaymentHistoryToJSON(requestParameters.createPaymentHistory),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataWechatPaymentItemFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianShandianPaymentStart(requestParameters: PostApiV1ShandianShandianPaymentStartRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataWechatPaymentItem> {
        const response = await this.postApiV1ShandianShandianPaymentStartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianShopPaymentCallbackRaw(requestParameters: PostApiV1ShandianShopPaymentCallbackRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.orderno === null || requestParameters.orderno === undefined) {
            throw new runtime.RequiredError('orderno','Required parameter requestParameters.orderno was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        if (requestParameters.outorderno === null || requestParameters.outorderno === undefined) {
            throw new runtime.RequiredError('outorderno','Required parameter requestParameters.outorderno was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        if (requestParameters.userid === null || requestParameters.userid === undefined) {
            throw new runtime.RequiredError('userid','Required parameter requestParameters.userid was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        if (requestParameters.refundstatus === null || requestParameters.refundstatus === undefined) {
            throw new runtime.RequiredError('refundstatus','Required parameter requestParameters.refundstatus was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        if (requestParameters.money === null || requestParameters.money === undefined) {
            throw new runtime.RequiredError('money','Required parameter requestParameters.money was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        if (requestParameters.receipt === null || requestParameters.receipt === undefined) {
            throw new runtime.RequiredError('receipt','Required parameter requestParameters.receipt was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        if (requestParameters.createTime === null || requestParameters.createTime === undefined) {
            throw new runtime.RequiredError('createTime','Required parameter requestParameters.createTime was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        if (requestParameters.updateTime === null || requestParameters.updateTime === undefined) {
            throw new runtime.RequiredError('updateTime','Required parameter requestParameters.updateTime was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        if (requestParameters.timestamp === null || requestParameters.timestamp === undefined) {
            throw new runtime.RequiredError('timestamp','Required parameter requestParameters.timestamp was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        if (requestParameters.sign === null || requestParameters.sign === undefined) {
            throw new runtime.RequiredError('sign','Required parameter requestParameters.sign was null or undefined when calling postApiV1ShandianShopPaymentCallback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.orderno !== undefined) {
            formParams.append('orderno', requestParameters.orderno as any);
        }

        if (requestParameters.outorderno !== undefined) {
            formParams.append('outorderno', requestParameters.outorderno as any);
        }

        if (requestParameters.userid !== undefined) {
            formParams.append('userid', requestParameters.userid as any);
        }

        if (requestParameters.status !== undefined) {
            formParams.append('status', requestParameters.status as any);
        }

        if (requestParameters.refundstatus !== undefined) {
            formParams.append('refundstatus', requestParameters.refundstatus as any);
        }

        if (requestParameters.money !== undefined) {
            formParams.append('money', requestParameters.money as any);
        }

        if (requestParameters.refundmoney !== undefined) {
            formParams.append('refundmoney', requestParameters.refundmoney as any);
        }

        if (requestParameters.receipt !== undefined) {
            formParams.append('receipt', requestParameters.receipt as any);
        }

        if (requestParameters.refundreceipt !== undefined) {
            formParams.append('refundreceipt', requestParameters.refundreceipt as any);
        }

        if (requestParameters.createTime !== undefined) {
            formParams.append('create_time', requestParameters.createTime as any);
        }

        if (requestParameters.updateTime !== undefined) {
            formParams.append('update_time', requestParameters.updateTime as any);
        }

        if (requestParameters.timestamp !== undefined) {
            formParams.append('timestamp', requestParameters.timestamp as any);
        }

        if (requestParameters.sign !== undefined) {
            formParams.append('sign', requestParameters.sign as any);
        }

        const response = await this.request({
            path: `/api/v1/shandian/shop/payment/callback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async postApiV1ShandianShopPaymentCallback(requestParameters: PostApiV1ShandianShopPaymentCallbackRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<string> {
        const response = await this.postApiV1ShandianShopPaymentCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianSimpleOrderGetRaw(requestParameters: PostApiV1ShandianSimpleOrderGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataKunSimpleOrder>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1ShandianSimpleOrderGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/simple-order/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataKunSimpleOrderFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianSimpleOrderGet(requestParameters: PostApiV1ShandianSimpleOrderGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataKunSimpleOrder> {
        const response = await this.postApiV1ShandianSimpleOrderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 下单咖啡获取确认链接
     */
    async postApiV1ShandianStarbuckOrderCaigouCoffeeRaw(requestParameters: PostApiV1ShandianStarbuckOrderCaigouCoffeeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataString>> {
        if (requestParameters.aglosticCaigouItemSignedAndStarkbuckItem === null || requestParameters.aglosticCaigouItemSignedAndStarkbuckItem === undefined) {
            throw new runtime.RequiredError('aglosticCaigouItemSignedAndStarkbuckItem','Required parameter requestParameters.aglosticCaigouItemSignedAndStarkbuckItem was null or undefined when calling postApiV1ShandianStarbuckOrderCaigouCoffee.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/shandian/starbuck/order/caigou/coffee`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AglosticCaigouItemSignedAndStarkbuckItemToJSON(requestParameters.aglosticCaigouItemSignedAndStarkbuckItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataStringFromJSON(jsonValue));
    }

    /**
     * 下单咖啡获取确认链接
     */
    async postApiV1ShandianStarbuckOrderCaigouCoffee(requestParameters: PostApiV1ShandianStarbuckOrderCaigouCoffeeRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataString> {
        const response = await this.postApiV1ShandianStarbuckOrderCaigouCoffeeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianTaobaoOrderCreateRaw(requestParameters: PostApiV1ShandianTaobaoOrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.addStarbuckGrouponTicket === null || requestParameters.addStarbuckGrouponTicket === undefined) {
            throw new runtime.RequiredError('addStarbuckGrouponTicket','Required parameter requestParameters.addStarbuckGrouponTicket was null or undefined when calling postApiV1ShandianTaobaoOrderCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/shandian/taobao/order/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddStarbuckGrouponTicketToJSON(requestParameters.addStarbuckGrouponTicket),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianTaobaoOrderCreate(requestParameters: PostApiV1ShandianTaobaoOrderCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1ShandianTaobaoOrderCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianVipShopGoodsRaw(requestParameters: PostApiV1ShandianVipShopGoodsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataShopItemDescription>> {
        const queryParameters: any = {};

        if (requestParameters.group !== undefined) {
            queryParameters['group'] = requestParameters.group;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/shandian/vip-shop/goods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataShopItemDescriptionFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianVipShopGoods(requestParameters: PostApiV1ShandianVipShopGoodsRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataShopItemDescription> {
        const response = await this.postApiV1ShandianVipShopGoodsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianVipShopGroupsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataVipShopGroupItem>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/shandian/vip-shop/groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataVipShopGroupItemFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianVipShopGroups(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataVipShopGroupItem> {
        const response = await this.postApiV1ShandianVipShopGroupsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianVipShopItemGoodidRaw(requestParameters: PostApiV1ShandianVipShopItemGoodidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataDetailRootInterface>> {
        if (requestParameters.goodid === null || requestParameters.goodid === undefined) {
            throw new runtime.RequiredError('goodid','Required parameter requestParameters.goodid was null or undefined when calling postApiV1ShandianVipShopItemGoodid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/shandian/vip-shop/item/{goodid}`.replace(`{${"goodid"}}`, encodeURIComponent(String(requestParameters.goodid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataDetailRootInterfaceFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianVipShopItemGoodid(requestParameters: PostApiV1ShandianVipShopItemGoodidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataDetailRootInterface> {
        const response = await this.postApiV1ShandianVipShopItemGoodidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianVipShopOrderOrderidRaw(requestParameters: PostApiV1ShandianVipShopOrderOrderidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataKunSimpleOrder>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1ShandianVipShopOrderOrderid.');
        }

        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling postApiV1ShandianVipShopOrderOrderid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/shandian/vip-shop/order/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunSimpleOrderFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianVipShopOrderOrderid(requestParameters: PostApiV1ShandianVipShopOrderOrderidRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataKunSimpleOrder> {
        const response = await this.postApiV1ShandianVipShopOrderOrderidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1ShandianXianyuPaymentItemidCaigouRaw(requestParameters: PostApiV1ShandianXianyuPaymentItemidCaigouRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataString>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling postApiV1ShandianXianyuPaymentItemidCaigou.');
        }

        if (requestParameters.aglosticCaigouItem === null || requestParameters.aglosticCaigouItem === undefined) {
            throw new runtime.RequiredError('aglosticCaigouItem','Required parameter requestParameters.aglosticCaigouItem was null or undefined when calling postApiV1ShandianXianyuPaymentItemidCaigou.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/shandian/xianyu/payment/{itemId}/caigou`.replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AglosticCaigouItemToJSON(requestParameters.aglosticCaigouItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataStringFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1ShandianXianyuPaymentItemidCaigou(requestParameters: PostApiV1ShandianXianyuPaymentItemidCaigouRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataString> {
        const response = await this.postApiV1ShandianXianyuPaymentItemidCaigouRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirAdmin50SecurityCreateRaw(requestParameters: PostApiV1TapirAdmin50SecurityCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirAdmin50SecurityCreate.');
        }

        if (requestParameters.reqMarkUserDanger === null || requestParameters.reqMarkUserDanger === undefined) {
            throw new runtime.RequiredError('reqMarkUserDanger','Required parameter requestParameters.reqMarkUserDanger was null or undefined when calling postApiV1TapirAdmin50SecurityCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/admin/50/security/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqMarkUserDangerToJSON(requestParameters.reqMarkUserDanger),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirAdmin50SecurityCreate(requestParameters: PostApiV1TapirAdmin50SecurityCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1TapirAdmin50SecurityCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirCardDio50OffsetCreateRaw(requestParameters: PostApiV1TapirCardDio50OffsetCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirCardDio50OffsetCreate.');
        }

        if (requestParameters.reqUpdateAudioLog === null || requestParameters.reqUpdateAudioLog === undefined) {
            throw new runtime.RequiredError('reqUpdateAudioLog','Required parameter requestParameters.reqUpdateAudioLog was null or undefined when calling postApiV1TapirCardDio50OffsetCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/card/dio/50/offset/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdateAudioLogToJSON(requestParameters.reqUpdateAudioLog),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirCardDio50OffsetCreate(requestParameters: PostApiV1TapirCardDio50OffsetCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1TapirCardDio50OffsetCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirCardDio50OffsetGetRaw(requestParameters: PostApiV1TapirCardDio50OffsetGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataKunAudioReadLog>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirCardDio50OffsetGet.');
        }

        if (requestParameters.reqGetAudioLog === null || requestParameters.reqGetAudioLog === undefined) {
            throw new runtime.RequiredError('reqGetAudioLog','Required parameter requestParameters.reqGetAudioLog was null or undefined when calling postApiV1TapirCardDio50OffsetGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/card/dio/50/offset/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqGetAudioLogToJSON(requestParameters.reqGetAudioLog),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunAudioReadLogFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirCardDio50OffsetGet(requestParameters: PostApiV1TapirCardDio50OffsetGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataKunAudioReadLog> {
        const response = await this.postApiV1TapirCardDio50OffsetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirCardDio60OffsetCreateRaw(requestParameters: PostApiV1TapirCardDio60OffsetCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirCardDio60OffsetCreate.');
        }

        if (requestParameters.reqUpdateAudioLog === null || requestParameters.reqUpdateAudioLog === undefined) {
            throw new runtime.RequiredError('reqUpdateAudioLog','Required parameter requestParameters.reqUpdateAudioLog was null or undefined when calling postApiV1TapirCardDio60OffsetCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/card/dio/60/offset/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdateAudioLogToJSON(requestParameters.reqUpdateAudioLog),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirCardDio60OffsetCreate(requestParameters: PostApiV1TapirCardDio60OffsetCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1TapirCardDio60OffsetCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirCardDio60OffsetGetRaw(requestParameters: PostApiV1TapirCardDio60OffsetGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataKunAudioReadLog>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirCardDio60OffsetGet.');
        }

        if (requestParameters.reqGetAudioLog === null || requestParameters.reqGetAudioLog === undefined) {
            throw new runtime.RequiredError('reqGetAudioLog','Required parameter requestParameters.reqGetAudioLog was null or undefined when calling postApiV1TapirCardDio60OffsetGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/card/dio/60/offset/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqGetAudioLogToJSON(requestParameters.reqGetAudioLog),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunAudioReadLogFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirCardDio60OffsetGet(requestParameters: PostApiV1TapirCardDio60OffsetGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataKunAudioReadLog> {
        const response = await this.postApiV1TapirCardDio60OffsetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirHorseCommentCreateRaw(requestParameters: PostApiV1TapirHorseCommentCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirHorseCommentCreate.');
        }

        if (requestParameters.reqCreateCardComment1 === null || requestParameters.reqCreateCardComment1 === undefined) {
            throw new runtime.RequiredError('reqCreateCardComment1','Required parameter requestParameters.reqCreateCardComment1 was null or undefined when calling postApiV1TapirHorseCommentCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/horse/comment/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateCardComment1ToJSON(requestParameters.reqCreateCardComment1),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirHorseCommentCreate(requestParameters: PostApiV1TapirHorseCommentCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1TapirHorseCommentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirHorseExerciseItemRaw(requestParameters: PostApiV1TapirHorseExerciseItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataKunExercise>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirHorseExerciseItem.');
        }

        if (requestParameters.reqGetExerciseItem === null || requestParameters.reqGetExerciseItem === undefined) {
            throw new runtime.RequiredError('reqGetExerciseItem','Required parameter requestParameters.reqGetExerciseItem was null or undefined when calling postApiV1TapirHorseExerciseItem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/horse/exercise/item`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqGetExerciseItemToJSON(requestParameters.reqGetExerciseItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataKunExerciseFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirHorseExerciseItem(requestParameters: PostApiV1TapirHorseExerciseItemRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataKunExercise> {
        const response = await this.postApiV1TapirHorseExerciseItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirHorsePraticeCommentCreateRaw(requestParameters: PostApiV1TapirHorsePraticeCommentCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirHorsePraticeCommentCreate.');
        }

        if (requestParameters.reqCreatePracticeComment === null || requestParameters.reqCreatePracticeComment === undefined) {
            throw new runtime.RequiredError('reqCreatePracticeComment','Required parameter requestParameters.reqCreatePracticeComment was null or undefined when calling postApiV1TapirHorsePraticeCommentCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/horse/pratice/comment/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreatePracticeCommentToJSON(requestParameters.reqCreatePracticeComment),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirHorsePraticeCommentCreate(requestParameters: PostApiV1TapirHorsePraticeCommentCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1TapirHorsePraticeCommentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirHorseSeriesGetpubliclistRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListHorseSeriesReturn>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tapir/horse/series/getPublicList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListHorseSeriesReturnFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirHorseSeriesGetpubliclist(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListHorseSeriesReturn> {
        const response = await this.postApiV1TapirHorseSeriesGetpubliclistRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirHorseSeriesQueryRaw(requestParameters: PostApiV1TapirHorseSeriesQueryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturn>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirHorseSeriesQuery.');
        }

        if (requestParameters.reqQuerySeriesHorse === null || requestParameters.reqQuerySeriesHorse === undefined) {
            throw new runtime.RequiredError('reqQuerySeriesHorse','Required parameter requestParameters.reqQuerySeriesHorse was null or undefined when calling postApiV1TapirHorseSeriesQuery.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/horse/series/query`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqQuerySeriesHorseToJSON(requestParameters.reqQuerySeriesHorse),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturnFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirHorseSeriesQuery(requestParameters: PostApiV1TapirHorseSeriesQueryRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<NoSqlPagingListDataPageMarkDateTimeHorseSeriesReturn> {
        const response = await this.postApiV1TapirHorseSeriesQueryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirMiniAppLoginRaw(requestParameters: PostApiV1TapirMiniAppLoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataMiniAppLoginToken>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling postApiV1TapirMiniAppLogin.');
        }

        const queryParameters: any = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/tapir/mini-app/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataMiniAppLoginTokenFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirMiniAppLogin(requestParameters: PostApiV1TapirMiniAppLoginRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataMiniAppLoginToken> {
        const response = await this.postApiV1TapirMiniAppLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirMiniAppUserinfoGetRaw(requestParameters: PostApiV1TapirMiniAppUserinfoGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataRetMiniAppUserItem>> {
        if (requestParameters.getUserInfo === null || requestParameters.getUserInfo === undefined) {
            throw new runtime.RequiredError('getUserInfo','Required parameter requestParameters.getUserInfo was null or undefined when calling postApiV1TapirMiniAppUserinfoGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/tapir/mini-app/userInfo/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetUserInfoToJSON(requestParameters.getUserInfo),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataRetMiniAppUserItemFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirMiniAppUserinfoGet(requestParameters: PostApiV1TapirMiniAppUserinfoGetRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataRetMiniAppUserItem> {
        const response = await this.postApiV1TapirMiniAppUserinfoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TapirPracticeAppriseCreateRaw(requestParameters: PostApiV1TapirPracticeAppriseCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1TapirPracticeAppriseCreate.');
        }

        if (requestParameters.reqUpdatePracticeAppraise === null || requestParameters.reqUpdatePracticeAppraise === undefined) {
            throw new runtime.RequiredError('reqUpdatePracticeAppraise','Required parameter requestParameters.reqUpdatePracticeAppraise was null or undefined when calling postApiV1TapirPracticeAppriseCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/tapir/practice/apprise/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqUpdatePracticeAppraiseToJSON(requestParameters.reqUpdatePracticeAppraise),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1TapirPracticeAppriseCreate(requestParameters: PostApiV1TapirPracticeAppriseCreateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1TapirPracticeAppriseCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1TestRaw(requestParameters: PostApiV1TestRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RetMsg>> {
        if (requestParameters.reqCreateShandianOrder === null || requestParameters.reqCreateShandianOrder === undefined) {
            throw new runtime.RequiredError('reqCreateShandianOrder','Required parameter requestParameters.reqCreateShandianOrder was null or undefined when calling postApiV1Test.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/test`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqCreateShandianOrderToJSON(requestParameters.reqCreateShandianOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RetMsgFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1Test(requestParameters: PostApiV1TestRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RetMsg> {
        const response = await this.postApiV1TestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiV1VipShopOrderStartRaw(requestParameters: PostApiV1VipShopOrderStartRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<OptionDataVipShopWechatPaymentItem>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling postApiV1VipShopOrderStart.');
        }

        if (requestParameters.reqStartVipOrder === null || requestParameters.reqStartVipOrder === undefined) {
            throw new runtime.RequiredError('reqStartVipOrder','Required parameter requestParameters.reqStartVipOrder was null or undefined when calling postApiV1VipShopOrderStart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/api/v1/vip/shop/order/start`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReqStartVipOrderToJSON(requestParameters.reqStartVipOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionDataVipShopWechatPaymentItemFromJSON(jsonValue));
    }

    /**
     */
    async postApiV1VipShopOrderStart(requestParameters: PostApiV1VipShopOrderStartRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<OptionDataVipShopWechatPaymentItem> {
        const response = await this.postApiV1VipShopOrderStartRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
